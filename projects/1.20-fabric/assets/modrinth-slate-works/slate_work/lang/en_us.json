{
  "itemGroup.slate_work": "Slate Works",

  "block.slate_work.storage_loci": "Storage Vessel",
  "block.slate_work.ambit_loci": "Ambit Extender",
  "block.slate_work.crafting_loci": "Patterned Assembler",
  "block.slate_work.speed_loci": "Wave Regulator",
  "block.slate_work.macro_loci": "Spell Imprinter",
  "block.slate_work.mute_loci": "Muffling Slate",
  "block.slate_work.sentinel_loci": "Sentinel Cache",
  "block.slate_work.broadcaster_loci": "Iotic Door",
  "block.slate_work.save_loci": "Restoration Mainframe",

  "block.slate_work.listening_impetus": "Librarian Impetus",

  "Patterns:": "",
  "hexcasting.action.slate_work:get_storage": "Get Vessels",
  "hexcasting.action.slate_work:check_item": "Check Item",
  "hexcasting.action.slate_work:store_item": "Lay Item",
  "hexcasting.action.slate_work:get_item": "Reawaken Item",
  "hexcasting.action.slate_work:sort_items": "Reorient Items",
  "hexcasting.action.slate_work:read_broadcast": "Review Broadcast",

  "hexcasting.action.slate_work:set_craft": "Set Recipe",
  "hexcasting.action.slate_work:set_macro": "Bind Macro",

  "hexcasting.action.slate_work:set_sents": "Apply Pseudosentinels",
  "hexcasting.action.slate_work:get_sents": "Locate Pseudosentinels",

  "hexcasting.action.slate_work:wave_position": "Wave Location Rfln.",
  "hexcasting.action.slate_work:wave_normal": "Wave Facing Rfln.",
  "hexcasting.action.slate_work:wave_speed": "Wave Speed Rfln.",
  "hexcasting.action.slate_work:media_reflection": "Circle Media Rfln.",

  "Items:": "",
  "item.slate_work.allay_pigment": "Quenched Pigment",
  "item.slate_work.whispering_stone": "Whispering Stone",
  "item.slate_work.whispering_stone.cords": "Location: ",
  "item.slate_work.whispering_stone.string": "Moniker: ",
  "item.slate_work.whispering_stone.no_cords": "No currently bound location",


  "Entries:": "",
  "slate_work.entry.storage_loci": "Locus Spells",
  "slate_work.page.storage_loci.1": "As wonderful as $(thing)Vessels/$ are for storage, they have an... opaque method of interaction. The main way of interaction is with _Hexes; more specifically, using a _Hex to describe what I wish to retrieve. Importantly, these all $(l:casting/mishaps2)mishap when not cast in a Spell Circle/$. $(br2)$(br)$(o)“Riddles,” I said. $(br)“Always preferable to no answer at all,” he responded.",
  "slate_work.page.storage_loci.2": "To elaborate more, $(thing)Vessels/$ respects Nature's silly rules regarding the \"Stack Limit\" by working around them. Rather than directly calling an item based on its name, I more-or-less supply a \"description;\" this is a _Hex that takes an $(l:patterns/scrying/item)Item Stack Iota/$, and needs to return a boolean. Also, all patterns to do with the retrieving of $(thing)Storage Vessels/$ take a copy of the Stack, and puts it onto the 'inner' stack (much like $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's Gambit/$).",
  "slate_work.page.storage_loci.get_storage": "This simply returns what $(thing)Vessels/$ the current $(l:greatwork/spellcircles)Spell Circle/$ has activated. I should likely use this to check if the $(l:greatwork/spellcircles)Spell Circle/$ has collected any $(thing)Vessels/$.",
  "slate_work.page.storage_loci.store_item": "It is much easier to store an item into a $(thing)Vessel/$ than to pull it out. This pattern simply takes an Item Entity, and neatly sorts it into the activated $(thing)Storage Vessels/$. Costs an 1/8th of a $(l:items/amethyst)dust/$ per activated $(thing)Vessel/$.",
  "slate_work.page.storage_loci.get_item": "This takes a _Hex and runs it on every $(l:patterns/scrying/item)Item Stack/$ stored (with it on top of the stack). Once the _Hex is executed, it requires a $(thing)Integer/$, $(thing)Vector/$, and $(thing)Boolean/$, left on the stack, in that order.",
  "slate_work.page.storage_loci.get_item_cont": "Further explained: this runs the given _Hex on every stored Item in the $(thing)Vessels/$. The _Hex must return (top to bottom) either a False (omits the Vector, and Number) or True, Vector, and Number. The Vector corresponds to where to output the items into the world (respecting ambit), and Number relates to how many of that type of item to retrieve. $(br2)Costs a 1/4th of a $(l:items/amethyst)dust/$ per activated $(thing)Vessel/$.",
  "slate_work.page.storage_loci.check_item": "Check Item functions much like Reawaken Item; however, it only requires a Boolean from the inputted _Hex. If the Boolean is ever True, the spell ends, and returns True.",
  "slate_work.page.storage_loci.sort_items": "In some rare scenarios, $(thing)Vessels/$ can get jumbled up and have items of the same type spread across different  $(thing)Vessels/$. This is a neat spell to resort them at a cost. That cost being 5 $(l:items/amethyst)Charged Amethyst/$.",
  "slate_work.page.storage_loci.set_craft": "Sets the crafting recipe of a $(l:greatwork/crafting_loci)Patterned Assembler/$. Takes a list of $(l:casting/influences)$(thing)Nulls/$, items, or item variants, and applies it to the targeted $(l:greatwork/crafting_loci)Assembler/$.",
  "slate_work.page.storage_loci.set_craft_cont": "To note: the given list gets \"formatted\" as left to right, top to bottom in the $(l:greatwork/crafting_loci)Patterned Assembler/$. As well, the $(l:casting/influences)$(thing)Nulls/$ represent blank spots in recipes. Finally, the Spell will mishap if the given list is longer than 9 items (but passes with less than or equal to 9 items). $(br2)Does not mishap if cast outside of a $(l:greatwork/spellcircles)Spell Circle/$. Costs a negligible amount of _media.",
  "slate_work.page.storage_loci.set_macro": "This binds both a pattern and an iota to a $(l:greatwork/macro_loci)Spell Imprinter/$, which is at the targeted vector. $(br2)Does not mishap if casted outside of a $(l:greatwork/spellcircles)Spell Circle/$. Costs a negligible amount of _media.",
  "slate_work.page.storage_loci.read_broadcast": "Attempts to read an $(l:greatwork/broadcaster_loci)Iotic Door/$ at the given vector. If there is not a $(l:greatwork/broadcaster_loci)Door/$, returns garbage. $(br)Does not mishap if casted outside of a $(l:greatwork/spellcircles)Spell Circle/$, free, and does not require ambit.",

  "slate_work.entry.storage_loci_block": "Storage Vessels",
  "slate_work.page.storage_loci_block.storage_loci": "After $(o)FAR TOO LONG/$ of lugging my items in clunky, splintery, $(o)chests/$... I have discovered the perfect method of storage, $(thing)Storage Vessels/$. $(br)Despite my current state, I am still far too full of mental garbage to interface with the $(thing)Storage Vessels/$. However, $(l:greatwork/spellcircles)Spell Circles/$ are perfect for insertion and extraction of these new storage methods.",
  "slate_work.page.storage_loci_block.storage_loci_cont": "While $(thing)Storage Vessels/$ can only hold 16 \"types\" of items each (much like a single chest holding only 27 slots), they ignore the standard stack limit, holding a near-infinite amount of each slot! $(br2)Additionally, as a $(l:greatwork/spellcircles)Spell Circle/$ activates these with its high-density $(thing)Media Wave/$, the $(l:greatwork/spellcircles)Circle/$ gains the ability to read and retrieve items from the $(thing)Storage Vessels/$ (stacking as more are activated). I have noted down the Spells for doing just that $(l:patterns/spells/storage_loci)here/$.",
  "slate_work.page.storage_loci_block.dropping": "Important to note: when $(thing)Storage Vessels/$ are broken, they do not eject the items stored within. Instead, they carefully pack all of their items into the resulting broken block (much like a $(item)Shulker Box/$). $(br2)$(br2)$(o)\"Oh boy! Time to get my items!\"$(br)[sound of chest opening]$(br)[sound of chest closing]$(br)[sound of chest opening]$(br)[sound of chest closing]$(br)[sound of chest opening]$(br)[sound of chest closing]",
  "slate_work.page.storage_loci_block.lens": "Whenever I wear a $(l:items/lens)Scrying Lens/$ and observe a $(thing)Storage Vessel/$, it displays the items held within, to me. This feels almost like Nature is toying with me, since there is no way to pull items directly out of a $(thing)Storage Vessel/$... I will admit however, it is handy to see what I have with a glance.",
  "slate_work.page.storage_loci_block.crafting": "The $(thing)Storage Vessel/$ requires a mind capable of diving into the depths, and retrieving something based on only a hint. A $(thing)Fisherman villager/$ is perfect for this.",

  "slate_work.entry.ambit_loci": "Ambit Extenders",
  "slate_work.page.ambit_loci.ambit_loci": "The $(thing)Ambit Extender/$ is a fabulous answer to my $(thing)Ambit/$ woes when it comes to $(l:greatwork/spellcircles)Spell Circles/$. This pops a vector from the stack, and extends ambit in the direction (negative vectors extending the negative corner of Circle Ambit). $(br2)$(o)With great range comes with great costs, err-",
  "slate_work.page.ambit_loci.ambit_loci_cont": "While this is not as strong as... $(l:https://forum.petra-k.at/viewtopic.php?t=136)other/$ methods of giving a $(l:greatwork/spellcircles)Spell Circle/$ more $(thing)Ambit/$, I do feel like Nature takes a kinder approach to my amalgamation of free will if I use this.$(br2)This does not come cheap however, the _media cost increases with the square of the total distance extended in $(l:items/amethyst)dust/$.",
  "slate_work.page.ambit_loci.crafting": "Since the $(thing)Ambit Extender/$ operates on $(thing)Ambit/$, having a \"core\" block that can operate on $(thing)Media Waves/$ would be beneficial. As well, having nearly $(l:greatwork/quenching_allays)Pure Media/$ would also be required for this construction.",

  "slate_work.entry.speed_loci": "Wave Regulators",
  "slate_work.page.speed_loci.speed_loci": "As I begin to explore the uses of the $(l:greatwork/spellcircles)Great Work/$, I find my self needing more control over these fascinating possibilities. So I have created the $(thing)Wave Regulator/$; what this does is it pops a number from the stack, and attempts to set the \"speed\" of the wave. More specifically, how many 20ths of a second the wave should wait before going to the next slate.",
  "slate_work.page.speed_loci.speed_loci_cont": "This system does have some limitations however. For one, it cannot set the speed to be faster than the wave could possibly move, doing nothing if I try to set the speed higher. Explained, it can only set the time to wait to any number above or equal the $(l:greatwork/spellcircles)circle's/$ default acquired speed, or back to its regular speed. To do this, the $(thing)Wave Regulator/$ needs to pop a 0 from the stack, and it gives the $(l:greatwork/spellcircles)Spell Circle/$ full control of the $(thing)Media Wave/$ again.",
  "slate_work.page.speed_loci.crafting": "$(thing)Wave Regulators/$ are odd in their construction compared to the rest of my... $(o)Gifted/$ visions. All they require is a $(l:greatwork/quenching_allays)scrap of Media/$ with some writhing will still left in it... how it must be in pain-- and some slate to make it compatible with the $(l:greatwork/spellcircles)Circle/$.",

  "slate_work.entry.crafting_loci": "Patterned Assemblers",
  "slate_work.page.crafting_loci.crafting_loci": "Oh how my hands $(o)Ache/$ and $(o)Buzz/$ from countless hours of slaving over a $(item)Crafting Table/$... luckily these days are over. The $(thing)Patterned Assembler/$ solves these pains and problems. $(br2)$(o)Items ever deeper in items, I cant stop crafting, I cant stop looking; more items must be crafted and automated. $(b)NOW/$.",
  "slate_work.page.crafting_loci.crafting_loci_cont": "Precisely what the $(thing)Patterned Assembler/$ does is it attempts to craft whatever item is set within, pulling from activated $(l:greatwork/storage_loci_block)Storage Vessels/$, and placing the resulting item(s) back into the $(thing)Vessels/$. This is triggered when the $(thing)Assembler/$ is activated with a $(l:greatwork/spellcircles)Spell Circle/$. The recipe can be set by hand, or via a $(l:patterns/spells/storage_loci#slate_work:set_craft)Spell/$. If it can craft the inscribed item, it returns a True to the stack and crafts the item, else it does not craft the item (not enough ingredients, no recipe, etc) and returns a False.",
  "slate_work.page.crafting_loci.crafting": "The $(thing)Patterned Assembler/$ requires the mind of a villager well adapted to paging through tomes and texts; it seems like the $(thing)Librarian/$ is perfect for this.",

  "slate_work.entry.macro_loci": "Spell Imprinter",
  "slate_work.page.macro_loci.macro_loci": "During my travels I have heard mutterances about things called \"macros,\" patterns that represent larger _Hexes (I believe these to be linked to a possible $(l:greatwork/akashiclib)Akashic Library/$?). Nonetheless, I am able to recreate these \"macros\" with Spell Circles using the $(thing)Spell Imprinter/$, and an iota written inside of a $(l:items/focus)any iota holder/$ placed on top of the $(thing)Imprinter/$.",
  "slate_work.page.macro_loci.macro_loci_cont": "When this is activated by a $(l:greatwork/spellcircles)Spell Circle/$, it binds the$(br)currently set pattern to the iota stored within the held item (which can be set via a $(l:patterns/spells/storage_loci#slate_work:set_macro)spell/$). Thus whenever the pattern is inscribed into slate and activated, it instead runs the iota rather than the written pattern. Though, the implications of this are horrifying, rewriting the definition of a $(o)spell/$. A thing that is deeply intertwined with the world itself, does that mean I, could be rewritten; changed by a higher force? No. N$(k)AAAAA!/$",
  "slate_work.page.macro_loci.lens": "A quite handy feature of the $(thing)Spell Imprinter/$ is being able to wear a $(l:items/lens)Scrying Lens/$ and observing the bound pattern and the iota to be ran with the bound pattern. $(br2)On closer observation of a freshly... \"constructed\" $(thing)Spell Imprinter/$, it has a pre-inscribed pattern of $(l:patterns/basics#hexcasting:get_caster)Mind's Reflection/$. Whilst useful, it is deeply unsettling for reasons I can not put into words...",
  "slate_work.page.macro_loci.crafting": "Despite the horrors this possibly ascertains... this is still an advantageous block to obtain. I believe a $(thing)Weaponsmith villager/$ would be the best fit. This is due to their adeptness at reworking broken weapons to new, sharper instruments.",

  "slate_work.entry.mute_loci": "Muffling Slate",
  "slate_work.page.mute_loci.mute_loci": "While I work with $(l:greatwork/spellcircles)Spell Circles/$ more and more, the constant $(o)crackles/$ from the $(thing)Media Wave/$ has begun to ring in my ears. And with some of my more... esoteric $(l:greatwork/spellcircles)Circles/$, nearly deafening me. $(br2)Luckily, this, the $(thing)Muffling Slate/$, can protect my ears from the obnoxious sounds and noises.",
  "slate_work.page.mute_loci.mute_loci_cont": "When activated by a $(l:greatwork/spellcircles)Spell Circle/$, this pops a number between 1 and 0 (inclusive for both), and sets the \"volume\" of the crackles and rackets to that. This applies to all sounds that the $(thing)Media Wave/$ makes, so executing patterns, $(l:greatwork/macro_loci)Macros/$, or moving will be silenced. $(br2)$(o)\"Nat, he's made sound! He's an audiomage!\" $(br)\"I hear it,\" Nat replies, not looking back. \"And stop inventing words.\"",
  "slate_work.page.mute_loci.crafting": "Thankfully, the $(thing)Muffling Slate/$ is a cheap and simple craft; taking a scrap of wool, and some slate. $(br2)$(br)$(o)Silence is gold for some, or even iron for more; but for my self, silence is diamonds.",

  "slate_work.entry.sentinel_loci": "Sentinel Cache",
  "slate_work.page.sentinel_loci.intro": "The yells, the screams, the agony. The unimaginable pain I felt? Saw? Experienced? Witnessed. The- the... I am getting distracted. I must write down what I have $(o)witnessed/$. During the lights, feelings, and $(o)surge/$ of my grand... does that even fit?- enlightenment, I saw a vision of a construct that would improve $(l:greatwork/spellcircles)Spell Circles/$. But at an extreme cost.",
  "slate_work.page.sentinel_loci.intro_cont": "The block- construct- $(o)amalgamation/$ is called the $(thing)Sentinel Cache/$. It is possibly the most flexible $(br) block for $(l:greatwork/spellcircles)Spell Circles/$, but the anguish required for its vision- am I going to make this? This creates a pseudo $(l:patterns/great_spells/greater_sentinel)Greater Sentinel/$ (called \"Pseudosentinel\") with a radius of 4 blocks that the circle can affect. This Pseudosentinel first \"spawns\" where ever the block is placed, but can be moved around with $(l:patterns/spells/sentinel_loci_patterns)spells/$. Costs a negligible amount of _media to awaken this monstrosity.",
  "slate_work.page.sentinel_loci.sentinel_loci" : "This agglomeration of minds, twisted, pulled, shattered, and mended. I $(o)hear/$ them, yet no sound is made, I $(o)hear/$ their pain. Several minds ripped and combined into a block. All for my gain... But- the way the light shimmers and dances off of the slate foundation, the wetted amethyst's gleam... $(o)It calls to me/$",
  "slate_work.page.sentinel_loci.extra": "My mind is degrading. I must finish my notes. $(o)Now/$. $(br2)If I observe the $(thing)Sentinel Cache/$ with a $(l:items/lens)Scrying Lens/$, it displays the current location of the $(l:patterns/great_spells/greater_sentinel)Pseudosentinel/$. As well, activating more $(thing)Sentinel Caches/$ adds to the list of all known $(thing)Caches/$, and the $(l:greatwork/spellcircles)Circle/$ gains ambit from each.",
  "slate_work.page.sentinel_loci.crafting": "For this amalgamation of agglomerations, it takes an $(l:greatwork/ambit_loci)Ambit Extender/$, to generate the ambit modifications, and a Master level $(thing)Villager/$ of any kind. If the mind was weaker, it would shatter against the already saturated Flayed Block.",

  "slate_work.entry.broadcaster_loci": "Iotic Door",
  "slate_work.page.broadcaster_loci.broadcaster_loci": "After close examination of the enigmatic gifted $(l:greatwork/akashiclib)Akashic Libraries/$, I believe that I may recreate their iota storage for $(l:greatwork/spellcircles)Spell Circles/$; albeit, in a cruder manner. $(br2)$(o)\"The door is open, if you're ready?\" $(br)\"No, not... not really, but...\" $(br)*sigh* *click*",
  "slate_work.page.broadcaster_loci.broadcaster_loci_cont": "The $(thing)Iotic Door/$ creates a \"back door\" into reality itsself, broadcasting the iota it holds within. Which, is set by popping the top iota of the $(l:greatwork/spellcircles)Spell Circle/$'s stack when activated. $(br2)As well, the $(thing)Door/$ can be read from anywhere in the world (as long as its being read in the same dimension), even bypassing the mysterious forces of chunkloading! The spell to read these are jotted down $(l:patterns/spells/storage_loci#slate_work:read_broadcast)here/$.",
  "slate_work.page.broadcaster_loci.extra": "Important to note, if the targeted position does not contain an $(thing)Iotic Door/$, it returns garbage. I may only assume this is somehow from the background noise of Nature? $(br2)Just as importantly, due to the crude nature of the $(thing)Iotic Door/$, it may only hold \"simple\" iotas; therefore lists (and any player references as well) can not be stored. $(br)Finally, if I adorn a $(l:items/lens)Scrying Len/$, I may see the iota this stores.",
  "slate_work.page.broadcaster_loci.crafting": "Due to the $(thing)Iotic Door/$'s odd nature of being read from anywhere, it requires a suitable amount of $(l:greatwork/quenching_allays)$(item)Quenched Allay/$ and parts from an $(l:greatwork/akashiclib)$(item)Akashic Library/$.",

  "slate_work.entry.save_loci": "Restoration Mainframe",
  "slate_work.page.save_loci.intro": "After careful research of $(thing)$(l:patterns/meta#hexcasting:eval/cc)Iris's Gambit/$, I now understand it stores the state of the cast as an Iota. And after hours of tinkering and failed experiments, I have recreated this, but for Spell Circles.$(br2)The $(thing)Restoration Mainframe/$ stores the total state of a $(l:greatwork/spellcircles)Spell Circle/$, most found Loci are saved into this, as well as: the stack, ravenmind, and escaping patterns.",
  "slate_work.page.save_loci.save_loci": "This works by \"swapping\" the internal stored state with the current running state. So whenever it is activated by a $(l:greatwork/spellcircles)Spell Circle/$, it will exchange the 2 states. Additionally, it seems like this stored state does not remember its \"orignal\" $(l:greatwork/spellcircles)Spell Circle/$, so it can be traded between $(l:greatwork/spellcircles)Spell Circles/$ if proper application of $(l:greatwork/directrix)$(item)Directrices/$ are used.",
  "slate_work.page.save_loci.scrying": "An important useful tidbit: if I don a $(l:items/lens)Scrying Lens/$ and observe the $(thing)Restoration Mainframe/$, I can see all the data it holds, which is: $(li)The Stack,$(li)The Ravenmind,$(li)Ops Consumed,$(li)Is Escaping,$(li)Iotas that been escaped,$(li)And total level of escaped.$(br2)I can foresee this will be an extremely useful tool for debugging Spell Circles among other uses.",
  "slate_work.page.save_loci.crafting": "$(o)bleep boop.",

  "slate_work.entry.slate_work_pigments": "Fanciful Pigments",
  "slate_work.page.slate_work_pigments.slate_work_pigments": "Just as my $(l:items/staff)Staves/$ have evolved, so too must my $(l:items/pigments)Pigments/$. These may not gift any glorious or grand amenities or effects, but all their boons are purely visual. $(br2)Additionally, those who know of these pigments, will now know of my $(o)Awakening/$.",
  "slate_work.page.slate_work_pigments.allay": "Since my... $(o)Visions/$, I have awoken to see the true form of Allays, nothing more than a scrap of _media. Perhaps this scrap of _media could be turned into a picture perfect pigment?",

  "slate_work.entry.slate_reflection": "Slate Reflections",
  "slate_work.page.storage_loci.wave_position": "Adds the current position of the $(thing)Media Wave/$ to the top of the stack.",
  "slate_work.page.storage_loci.wave_normal": "Adds the current facing of the $(thing)Media Wave/$ to the top of the stack. If the current block does not have a facing, it returns a vector of [0,0,0].",
  "slate_work.page.storage_loci.wave_speed": "Adds the current speed of the $(thing)Media Wave/$ to the top of the stack. This is measured in how many 20ths of a second the $(thing)Media Wave/$ waits until going to the next $(l:items/slate)Slate.",
  "slate_work.page.storage_loci.media_reflection": "Adds the current amount of _Media in the $(thing)Impetus/$ to the stack, in units of $(l:items/amethyst)dust/$.",

  "slate_work.entry.sentinel_loci_patterns": "Sentinel Cache Patterns",
  "slate_work.page.sentinel_loci_patterns.1": "$(l:greatwork/sentinel_loci)Sentinel Caches/$ have an odd method of interaction compared to their non-$(l:greatwork/spellcircles)Spell Circle/$ $(l:patterns/great_spells/greater_sentinel)counter parts/$. They are interfaced via a list of vectors, opposed to a single vector. $(br2)These all $(l:casting/mishaps2)mishap when not cast in a Spell Circle/$.",
  "slate_work.page.sentinel_loci_patterns.break_space": "$(o)It's doing physical and mental damage to it, as if it had body parts and organs and memories being consumed as _Media. $(o)$(br2)It burns its life story for fuel. $(o)$(br2)It burns its fingers and toes and its attachments to the ground until there's nothing but pure cognition.",
  "slate_work.page.sentinel_loci_patterns.set_sents": "This takes a list of vectors, and attempts to move the Pseudosentinels to the positions.",
  "slate_work.page.sentinel_loci_patterns.set_sents_cont": "Helpfully, the list of vectors from $(thing)Locate Pseudosentinels/$ will always match the order of $(thing)Apply Pseudosentinels/$, meaning I need not worry about the ordering. $(br2)This will mishap if the given list is larger than the current awoken $(l:greatwork/sentinel_loci)Cache/$ amount. Costs 1 $(l:items/amethyst)dust/$ to command the Pseudosentinel, and due to fatigue, an extra 1/8th of a $(l:items/amethyst)dust/$ (stacking) for each Pseudosentinel that was already moved in the same instance.",
  "slate_work.page.sentinel_loci_patterns.get_sents": "This retrieves the current positions of all Pseudosentinels in the order they were awoken. Free to cast.",

  "slate_work.entry.impeti": "Slate Work Impeti",
  "slate_work.page.impeti.intro": "As I dive deeper and deeper into my $(thing)Awakening/$, I have discovered new $(l:greatwork/impetus)Impeti/$ locked away within my self. Why did Nature bury and hide these designs and blueprints? Perhaps, it assumed that I could not handle them? Even after my $(thing)Awakening/$? Or perchance, it was because they could not exist when I $(thing)Awoke/$? $(br2)Whatever it may be, I can now utilize them.",
  "slate_work.page.impeti.filler": "$(o)It's large enough to require a finely calculated deliberate warping, of just a few centimetres from one end of the circle to the other, to account for the curvature of the Earth underneath it. Bright red and green beacons mark important loci and enable the accurate guiding of energy from one side of the circle to the other.",
  "slate_work.page.impeti.listener": "The first design freed and conceptualized is the $(item)Librarian Impetus/$. This reuses the Librarian's extensive vocabulary into a tool to understand what I say out loud.",
  "slate_work.page.impeti.listener_cont": "To first use this, one must first \"bind\" a moniker to the $(item)Impetus/$ by using a $(l:patterns/text_iotas)Text Iota/$ held within an item, such as a $(item)Focus/$, on the $(item)Impetus/$. Then if a message is spoken within 16 blocks (or more if I use a $(l:items/whispering_stone)Whispering Stone/$) of the $(item)Impetus/$ and starts with that moniker; it silences that message, and starts the $(item)Librarian Impetus/$ with the content of the rest of the message and the speaker on its stack. Thankfully, this will $(o)not/$ cast as the one who spoke. Finaly, this gains a 16 block radius of ambit around the $(item)Impetus/$.",

  "slate_work.entry.whispering": "Whispering Stone",
  "slate_work.page.whispering.whispering_stone": "After finalizing the construction of my $(l:greatwork/listener_impetus#slate_work:listener)Librarian Impetus/$, I have found my self needing to be able to \"reach\" it from further away. After a flash of genius, combining a $(item)slate/$, some $(item)amethyst dust/$ as a binding agent, and an $(item)Echo Shard/$; I now have a device that can listen to what I say whenever I hold it and speak.",
  "slate_work.page.whispering.cont": "When I click this onto a $(l:greatwork/listener_impetus#slate_work:listener)Librarian Impetus/$, it binds its self to the Impetus, stating its location and moniker. Then, whenever I state the moniker while holding the item, it silents me, and starts the bound $(l:greatwork/listener_impetus#slate_work:listener)Librarian Impetus/$.$(br2)However, if the $(thing)impetus/$ has had its moniker changed, I simply can just lightly \"shake\" the $(thing)stone/$, and it will update.",
  "slate_work.page.whispering.bound": "Finally, the $(item)Whispering Stone/$ can be unbound in 2 ways. If I crouch and use the $(thing)stone/$, it clears its bound $(thing)impetus/$. As well, if I attempt to speak into the $(thing)stone/$ while the bound $(thing)impetus/$ is destroyed and or relocated, it will unbind its self; but still silencing me for one last time.$(br2)Importantly: the $(thing)Whispering Stone/$ can not start the Impetus if it lays outside of \"chunk loading\"'s range.",
  "slate_work.page.whispering.crafting": "$(o)Whispers and mutterances, gasps and fears, I can hear these faintly echo from this $(thing)stone/$$(o). What was done to that $(b)shard/$$(o)?",

  "Mishaps:": "",
  "hexcasting.mishap.circle.no_storage_loci_ran": "At %s did not find any activated Vessels",
  "hexcasting.mishap.circle.media_costs": "At %s required more Media than what the impetus held",
  "hexcasting.mishap.circle.readable": "At %s required a List in a Focus, but did not get that",
  "hexcasting.mishap.circle.simpler_iota": "At %s required a simpler Iota",
  "hexcasting.mishap.invalid_value.simpler_iota": "a simpler Iota",

  "hexcasting.mishap.no_storage_loci_ran": "Did not find any activated Vessels",
  "hexcasting.mishap.list_length": "Required a list with %s items, but got %s items",
  "hexcasting.mishap.wrong_block": "Required a(n) %s at %s, but found %s",
  "hexcasting.mishap.needed_focus": "Required a focus at %s, but did find that",
  "hexcasting.mishap.no_storage_sentinel_ran": "Did not find any activated Caches",

  "Scrying Lenses:": "",
  "slate_work.scrying.macro.top": "Pattern: ",
  "slate_work.scrying.macro.error": "Could not display Iota(s)",
  "slate_work.scrying.impetus.listening.bound": "The bound moniker is:",
  "slate_work.scrying.impetus.listening.unbound": "Not currently monikered",

  "slate_work.scrying.save.translater_comment": "These next \"save\" translations are based on the `CastingImage` class",
  "slate_work.scrying.save.escaping": "Is Escaping: ",
  "slate_work.scrying.save.ops": "Ops Consumed: ",
  "slate_work.scrying.save.paren": "Total Levels of Escape: ",
  "slate_work.scrying.save.escaped": "Iotas Escaped: ",
  "slate_work.scrying.save.stack": "The Stack: ",
  "slate_work.scrying.save.ravenmind": "The Ravenmind: "
}