{
	"hexcasting.mishap.overevaluate:assert": "Assertion failed: %s.",
	"hexcasting.mishap.overevaluate:needs_skippable": "Expected to be run inside of a skippable context.",
	"hexcasting.mishap.overevaluate:needs_thoth": "Expected to be run inside of Thoth's Gambit.",
	"hexcasting.mishap.overevaluate:apep": "Expected an iota at the top of the Apep pseudo-stack.",
	"hexcasting.mishap.overevaluate:themis": "Expected a number at the top of the Themis pseudo-stack.",

	"overevaluate.page.extra_stack.title": "Extra Stack Manipulation",
	"special.overevaluate.sekhmet": "Sekhmet's Gambit: %s",
	"hexcasting.action.overevaluate:sekhmet": "Sekhmet' Gambit",
	"hexcasting.special.overevaluate:sekhmet": "Sekhmet' Gambit: %s",
	"overevaluate.page.sekhmet.0": "Voids the entire stack except for the top n iota, determined by tail length. In the examples above, zero, one, and two iota are left untouched respectively.",
	"overevaluate.page.sekhmet.1": "This simple gambit serves as a convenient wrapper around a specific combination of $(l:patterns/stackmanip#hexcasting:stack_len)$(action)Flock's Reflection$(), $(l:patterns/lists#hexcasting:last_n_list)$(action)Flock's Gambit$(), $(l:patterns/lists#hexcasting:slice)$(action)Selection Exaltation$(), and $(l:patterns/lists#hexcasting:splat)$(action)Flock's Disintegration$(). It also pairs extremely well with $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's Gambit$() to leave only the iotas I am interested in on the pseudo-stack.$(br2)$(o)Everything is possible, but not everything is necessary.$()",
	"special.overevaluate.geb": "Geb's Gambit: %s",
	"hexcasting.action.overevaluate:geb": "Geb's Gambit",
	"hexcasting.special.overevaluate:geb": "Geb's Gambit: %s",
	"overevaluate.page.geb": "Yanks the iota n from the top up to the top, determined by tail length. In the examples above, the iota second, third, and fourth from the top are yanked respectively.",
	"special.overevaluate.nut": "Nut's Gambit: %s",
	"hexcasting.action.overevaluate:nut": "Nut's Gambit",
	"hexcasting.special.overevaluate:nut": "Nut's Gambit: %s",
	"overevaluate.page.nut": "Sinks the top iota n from the top, determined by tail length. In the examples above, the iota is moved to the second, third, and fourth place from the top respectively.",
	"hexcasting.action.overevaluate:swap_one_three": "Reflecting Gambit",
	"overevaluate.page.swap_one_three.summary": "Reflects the order of the top three iota, turning A, B, C into C, B, A. Essentially swaps the top and the third-from-the-top iota.",
	"hexcasting.action.overevaluate:swap_two_three": "Bubbling Gambit",
	"overevaluate.page.swap_two_three.summary": "Causes the third-from-the-top iota to bubble up over the second-from-the-top iota, essentially swapping them.",
	"hexcasting.action.overevaluate:dup_many": "Dioscuri Gambit II",
	"overevaluate.page.dup_many.summary": "Takes a number and duplicates that many elements of the stack while preserving order.",

	"overevaluate.page.soroban.title": "Soroban",
	"overevaluate.page.soroban.0": "These patterns perform simple integer operations on an imaginary counter called the soroban. They may be useful when $(l:patterns/readwrite#hexcasting:local)Ravenmind$() is occupied or unnecessarily complicated, for example to count iterations in a $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's$() loop.",
	"hexcasting.action.overevaluate:soroban_increment": "Soroban Reflection",
	"overevaluate.page.soroban_increment.summary": "Pushes soroban's current value and then increases it. Starts at 0.",
	"hexcasting.action.overevaluate:soroban_decrement": "Soroban Reflection II",
	"overevaluate.page.soroban_decrement.summary": "Pushes soroban's current value and then decreases it.",
	"hexcasting.action.overevaluate:soroban_reset": "Soroban Gambit",
	"overevaluate.page.soroban_reset.summary": "Resets the soroban to 0.",

	"overevaluate.page.metas.title": "Advanced Metaevaluation",
	"hexcasting.action.overevaluate:athena": "Athena's Gambit",
	"overevaluate.page.athena.summary": "Casts a list of patterns similar to $(l:patterns/meta#hexcasting:eval)$(action)Hermes' Gambit$() but allows for handling of mishaps.",
	"overevaluate.page.athena.description": "If the provided pattern list mishaps while being cast, the remainder of the list will be skipped and the main _Hex continues without incurring the effects of the mishap. Pushes whether the pattern list mishapped.$(br2)Patterns documented on the next pages can request further information on the specific mishap.$(br2)$(o)Keep moving forward.$()",
	"hexcasting.action.overevaluate:athena_print": "Athena's Revelation",
	"overevaluate.page.athena_print.summary": "Reveals to me the last mishap caught by $(l:metaevals#overevaluate:athena)$(action)Athena's Gambit$() within this _Hex.",
	"hexcasting.action.overevaluate:athena_log": "Athena's Reflection",
	"overevaluate.page.athena_log.summary": "Pushes the last mishap caught by $(l:metaevals#overevaluate:athena)$(action)Athena's Gambit$() as $(o)text$(). It requires $(l:https://modrinth.com/mod/moreiotas)$(thing)certain powers$() to be at play or this pattern simply produces meaninglessness.",
	"hexcasting.action.overevaluate:apep": "Apep's Gambit",
	"overevaluate.page.apep.summary": "Folds across the first list using the _Hex in the second list.",
	"overevaluate.page.apep.description": "Starts with the first two elements of the list and casts the _Hex on them. Then, the top iota remaining after casting and the next element in the list are placed on the stack and casted upon, repeating until the entire list has been exhausted. The top iota after all that is finally pushed onto the stack.$(br2)$(o)Euler did music too, you know$()",
	"hexcasting.action.overevaluate:tutu": "Tutu's Gambit",
	"overevaluate.page.tutu.summary": "Does nothing.",
	"overevaluate.page.tutu.description": "This pattern seems useless but is helpful in conjunction with $(l:patterns/meta#hexcasting:halt)$(action)Charon's Gambit$() or $(l:metaevals#overevaluate:janus)$(action)Janus' Gambit$() as the \"other branch\". Executing it does not consume an operation, consume media, produce particles, or have any other impact on the world.$(br2)$(o)The only winning move is not to play.$()",
	"hexcasting.action.overevaluate:janus": "Janus' Gambit",
	"overevaluate.page.janus.summary": "Instantly terminates the _Hex regardless of current circumstances.",
	"overevaluate.page.janus.description": "It's useful to end a _Hex early once it has reached some desired state because it can bypass the \"containment\" of $(l:patterns/meta#hexcasting:eval)$(action)Hermes' Gambit$() and $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's Gambit$() unlike $(l:patterns/meta#hexcasting:halt)$(action)Charon's Gambit$().$(br2)$(o)It is always important to know when something has reached its end.$()",
	"hexcasting.action.overevaluate:maat": "Ma'at's Gambit",
	"overevaluate.page.maat.summary": "Takes a boolean and any iota. If the boolean is false, mishaps and prints the iota.",
	"overevaluate.page.maat.description": "This pattern is useful in order to break out of _Hexes if certain programmed conditions are not met.$(br2)$(o)Order in the court.$()",
	"special.overevaluate.nephthys": "Nephthys' Gambit: %s",
	"hexcasting.action.overevaluate:nephthys": "Nephthys' Gambit",
	"hexcasting.special.overevaluate:nephthys": "Nephthys' Gambit: %s",
	"overevaluate.page.nephthys.summary": "Pops a pattern or pattern list and dives down an amount corresponding to the tail length to cast the pattern list. Useful for surgery-like operations.",
	"overevaluate.page.nephthys.description": "It's extremely versatile and I can mend almost any error in my stack using $(l:patterns/stackmanip#hexcasting:mask)$(action)Bookkeeper's Gambit$(), pushing iota after a dive, and transforming surfaced iota. It was named after a goddess of mourning and rivers, lending to how it buries/dives down into the stack.$(br2)$(o)... the unknowns of time travel... is akin to descending blindly into the depths of the freezing water and reappearing as an acorn.$()",
	"hexcasting.action.overevaluate:atalanta": "Atalanta's Gambit",
	"overevaluate.page.atalanta.summary": "Should only be run inside $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's$() or $(l:metaevals#overevaluate:sisyphus)$(action)Sisyphus' Gambit$(). Acts similarly to $(l:patterns/meta#hexcasting:halt)$(action)Charon's Gambit$() except does not end the iterator, only skips the rest of the current iteration.",
	"overevaluate.page.atalanta.description": "This pattern can be useful to implement \"guard clauses\" for multiconditional loops. For example, after getting a list of entities, I may want to only target entities based on some large list of conditions. Rather than a mess of deeply nested conditionals, I can simply $(o)continue$() to the next iteration if any of the conditions fail, skipping the action.$(br2)$(o)You shall not pass!$()",
	"hexcasting.action.overevaluate:castor": "Castor's Gambit",
	"overevaluate.page.castor.summary": "Should only be run within a $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's$(). Details on the next page. Beware of triggering the Delve Too Deep mishap.",
	"overevaluate.page.castor.description": "This pattern pops an iota and schedules a new iteration of $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's$() to come right after the current one, with the popped iota being the top of the stack. It may be helpful to imagine it as the iota being added to the front of the list that I provided for $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's$() to iterate over.$(br2)$(o)Do not go where the path may lead, go instead where there is no path... and leave a trail.$()",
	"hexcasting.action.overevaluate:pollux": "Pollux's Gambit",
	"overevaluate.page.pollux.summary": "Sibling pattern to $(l:metaevals#overevaluate:castor)$(action)Castor's Gambit$(), this pattern schedules the additional iteration for the end instead. Carries the same risk of encountering the Delve Too Deep mishap.",
	"overevaluate.page.pollux.description": "Acts almost identically to its sibling pattern, but places the iteration at the end. I have read scrolls detailing techniques using these twin patterns called $(o)$(l:https://en.wikipedia.org/wiki/Depth-first_search)depth-first search$() and $(o)$(l:https://en.wikipedia.org/wiki/Breadth-first_search)breadth-first search$().$(br2)$(o)Explore the surface before diving deep.$()",
	"hexcasting.action.overevaluate:sisyphus": "Sisyphus' Gambit",
	"overevaluate.page.sisyphus.summary": "Takes a pattern list and casts it over and over forever until it encounters either a $(l:patterns/meta#hexcasting:halt)$(action)Charon's Gambit$() or a $(l:metaevals#overevaluate:janus)$(action)Janus' Gambit$().",
	"overevaluate.page.sisyphus.description": "While I have heard of self-producing _Hexes called $(o)quines$() used to make infinite loops, they can be slightly unwieldy to work with. This gambit simplifies that process by just repeatedly casting a list until it runs out of evaluations or encounters a $(l:patterns/meta#hexcasting:halt)$(action)Charon's Gambit$(). The $(l:patterns/readwrite#hexcasting:local)Ravenmind$() and stack are carried across iterations.$(br2)$(o)One always finds one's burden again... One must imagine Sisyphus happy.$()",
	"hexcasting.action.overevaluate:themis": "Themis' Gambit",
	"overevaluate.page.themis.summary": "Takes a list and a pattern or pattern list which is used to sort the list by casting over every iota similar to $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's Gambit$().",
	"overevaluate.page.themis.description": "After each iteration, it demands a number at the top of the stack which will correspond to that iota. At the end of the gambit, a list is pushed with the iota sorted by that number in increasing order. The order of identically numbered iota are kept. If it encounters $(l:patterns/meta#hexcasting:halt)$(action)Charon's Gambit$(), it will create a sorted list with only the iota it has come across.$(br2)$(o)Shuffling is the only thing which Nature cannot undo.$()"
}
