{
  "articles": [
    {"id": "test", "contents": [
      {"type": "text", "text": "Test Article\n", "bold": true},
      {"type": "text", "text": "Test article text. There is lots of thext. Loriem ipsum sit dolor foobar blah blah\n\n\n\n\n\n\n"},
      {"type": "image", "width": 128, "height": 128, "path": "neepmeat:guide/images/test.png"},
      {"type": "text", "text": "More text!\n\n\n\n\n\n\n\n\n _____________________________________________________________________________________________________________________________________________________________________________________________--________________________________________________________________________________________________________________"}
      ]},
    {"id": "intro", "contents": [
      {"type": "ctext", "text": "\n"},
      {"type": "image", "width": 60, "height": 25, "scale": 0.6, "path": "neepmeat:textures/gui/tablet/neep.png"},
      {"type": "ctext", "text": "North-East Electric and Petrochemical\n\n"},
      {"type": "ctext", "text": "NEEP INDUSTRIAL SUITE", "bold": true},
      {"type": "ctext", "text": "Owner's Manual\n\n"},
      {"type": "text", "text": "Thank you for choosing industrial solutions from NEEP. This guide will take you through our debut range of biomechanical abominations."},
      {"type": "text", "text": "\nNote: Some of the mod's items exist under the 'meatweapons' namespace. \nAll items can be shown in REI/EMI by searching '@meat'."},
      {"type": "text", "text": "\nNote: Crafting and processing recipes are not yet supported in this guide. To view them, you must use Roughly Enough Items or EMI."}
    ]},
    {"id": "fluids", "contents": [
      {"type": "text", "text": "Power Transfer\n", "bold": true},
      {"type": "text", "text": "Unlike other products which use such inferior elements as electricity, NEEP machines are powered by the Divine itself."},
      {"type": "text", "text": "\nPower and energy are measured in NEEP customary units. The unit of energy is the esoteric joule (eJ). Power is measured in esoteric joules per tick (eJ/t)."},
      {"type": "text", "text": "\nEthereal Fuel\n", "bold": true},
      {"type": "text", "text": "Energy density: 81keJ/b"},
      {"type": "text", "text": "Ethereal Fuel is a transient manifestation of Divine efficacy that is produced in a Fuel Transducer. It is used to power basic motors and is transferred through fluid pipes."},
      {"type": "text", "text": "\nVascular Conduits\n", "bold": true},
      {"type": "text", "text": "Vascular Conduits simply encapsulate the complex logistics of power flow. Integration Fluid (blood fortified with Enlightened animalcules) is transmitted in a three-phase peristaltic cycle, delivering consistent power to advanced machines."}
    ]},

    {"id": "fuel_transducer", "contents": [
      {"type": "text", "text": "Fuel Transducer\n", "bold": true},
      {"type": "text", "text": "The Fuel Transducer imbues a working substrate with received heat, producing Ethereal Fuel."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "The Transducer must be incorporated into the structure shown below. It must be placed above a tank of water with a heat source below. Heat sources include lit furnaces, lava, lava cauldrons and magma blocks, although lit furnaces provide the most energy. \nEthereal fuel is ejected at pressure from the top of the dome.\nFor a steady source of water, try a Drain below a regenerating water source."},
      {"type": "image", "width": 32, "height": 98, "scale": 0.2, "path": "neepmeat:guide/images/transducer_usage.png"},
      {"type": "text", "text": "\nHeat sources and power outputs:", "bold": true},
      {"type": "text", "text": "- Lava: 20eJ/t"},
      {"type": "text", "text": "- Lava Cauldron: 20eJ/t"},
      {"type": "text", "text": "- Magma Block: 20eJ/t"},
      {"type": "text", "text": "- Lit Furnace: 40eJ/t"}
    ]},
    {"id": "power_flower", "contents": [
      {"type": "text", "text": "Power Flower\n", "bold": true},
      {"type": "text", "text": "The Power Flower is an organism that can synthesise Ethereal Fuel from sunlight and by liquid food."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "Power Flower Seeds can be placed on any dirt-like block and will eventually mature into a larger growth. \nWhen a growth block has air above it and one or more growth blocks below it, it will specialise into a photosynthetic organ and produce 20eJ/t constantly. Otherwise, it will increase the rate at which foods are digested and metabolised."},
      {"type": "text", "text": "Water inserted through a Power Flower Fluid Port is necessary for fuel production"},
      {"type": "text", "text": "\nFoods:"},
      {"type": "text", "text": "- Meat: 3eJ/t per droplet per block"},
      {"type": "text", "text": "- Animal Feed: 4eJ/t per droplet per block"},
      {"type": "text", "text": "- Food: (1 + hunger) eJ/t per droplet per block"}
    ]},
    {"id": "heart_machine", "contents": [
      {"type": "text", "text": "Heart Machine\n", "bold": true},
      {"type": "text", "text": "This machine forms the heart and lungs of a vascular network. It imbibes Ethereal Fuel to energise the network and regulates its operating frequency."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "The Heart Machine consumes Ethereal Fuel through its lower block and injects energy into a vascular network through its upper block. Its greater efficiency allows it to liberate 50% more energy from the Ethereal Fuel than a basic motor would."}
    ]},

    {"id": "mixer", "contents": [
      {"type": "text", "text": "Mixer\n", "bold": true},
      {"type": "text", "text": "The Mixer is a two block tall machine that combines fluids and items. It requires a source of rotation to function."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "Fluid inputs are taken from any tank that is adjacent to the mixer's lower block. Item inputs must be inserted directly into the machine through hoppers or pipes. Once a valid combination of items and fluids is present, the mixing will begin. The rate of this process is determined by the speed of the connected motor."}
    ]},
    {"id": "motor", "contents": [
      {"type": "text", "text": "Motor\n", "bold": true},
      {"type": "text", "text": "Arcane artifice, a blessing of the Integrator, allows a motor to convert the subtle efficacies of Ethereal Fuel into mechanical work."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "Many rotary machines require an external motor in order to function. This motor accepts Ethereal Fuel, produced with a Fuel Transducer, through fluid pipes. \nThe motor's speed is determined by the rate at which fluid is inserted. This often affects the speed of the connected machine."}
    ]},
    {"id": "advanced_motor", "contents": [
      {"type": "text", "text": "Advanced Motor\n", "bold": true},
      {"type": "text", "text": "Unlike its more primitive alternative which accepts Ethereal Fuel directly, this motor is powered by fortified blood delivered through vascular conduits."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "The Advanced Motor works exactly like the standard version except it must be connected to a vascular network."}
    ]},
    {"id": "stirling_engine", "contents": [
      {"type": "text", "text": "Stirling Engine\n", "bold": true},
      {"type": "text", "text": "The Stirling Engine converts heat energy from burning fuel into mechanical work."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "The Stirling Engine can accept any valid furnace fuel and will rotate as long as the fuel burns. At full speed it will output 80eJ/t of mechanical power."}
    ]},
    {"id": "grinder", "contents": [
      {"type": "text", "text": "Crusher\n", "bold": true},
      {"type": "text", "text": "The Crusher rends both flesh and stone into dust, revealing the hidden treasures within."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "Processing certain ore blocks with the Crusher gives slightly higher yields. Meat-scraps can be obtained by crushing raw meat. A running motor must be connected for this machine to function."}
    ]},
    {"id": "bottler", "contents": [
      {"type": "text", "text": "Bottler\n", "bold": true},
      {"type": "text", "text": "The Bottler automatically inserts fluids from a tank below into item containers."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "When active, this machine will move fluid from a tank placed directly below into the item in its inventory. Fluid container items can be inserted or removed with hoppers or by right-clicking. Once filled, items will be ejected from the front of the machine into tubes or a container. A running motor must be connected for this machine to function."}
    ]},
    {"id": "item_mincer", "contents": [
      {"type": "text", "text": "Item Mincer\n", "bold": true},
      {"type": "text", "text": "The Item Mincer squeezes food items into a Food slurry. The quality of the resulting Food is determined by the quality of the inserted food."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "Items can be inserted through hoppers or pipes or by dropping them into the hopper. Food is accessible by pipes on the machine's front face. A running motor must be connected for this machine to function.\n\nEach item produces 111mb of Food, but the hunger and saturation values of the food are retained by the fluid. Foods of differing quality can be mixed in any NEEPMeat fluid tank."},
      {"type": "text", "text": "\nFood can be inserted into cartons for consumption or can be fed to a Power Flower for power generation."}
    ]},
    {"id": "large_mincer", "contents": [
      {"type": "text", "text": "Large Mincer\n", "bold": true},
      {"type": "text", "text": "The Large Mincer provides a compact means of converting substrate organisms into Tissue Slurry."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "Substrate organisms must be inserted into the machine's awaiting jaws from above. Tissue Slurry can be extracted from the lower block for further purification with a Trommel. A running motor must be connected to the base for this machine to function."}
    ]},
    {"id": "death_blades", "contents": [
      {"type": "text", "text": "Death Blades\n", "bold": true},
      {"type": "text", "text": "There is no more dramatic or efficacious a means of rending an organism to Meat than this."},
      {"type": "text", "text": "\nAcquisition\n", "bold": true},
      {"type": "text", "text": "\nWhen supplied with a source of rotation, the Death Blades will damage nearby entities. If an entity is terminated above a drain, a small amount of Tissue Slurry will be collected."}
    ]},
    {"id": "pylon", "contents": [
      {"type": "text", "text": "Pylon\n", "bold": true},
      {"type": "text", "text": "When at operating speed, the Pylon's emanations stimulate the pineal glands of nearby vertebrates. This permits limited glimpses of the unseen. For unknown reasons, this process can also grant unseen forms substance in the waking world."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "The Pylon requires a motor facing upwards beneath it. To achieve operating speed, the motor must run at 240eJ/t or above. When at operating speed, the rotor will turn from red to purple. "},
      {"type": "text", "text": "An active Pylon within a 17 block range of an Advanced Integrator will allow its information reserves to exceed 8GeB."},
      {"type": "text", "text": "The emanations of the pylon have a highly debilitating Enlightening effect that is partially permanent. Do not go within three blocks of an active Pylon."}
    ]},

    {"id": "gland_potato", "contents": [
      {"type": "text", "text": "Gland Potato\n", "bold": true},
      {"type": "text", "text": "The Gland Potato is the simplest example of an Enlightened organism. Exposure to the Divine has caused it to take on exotic fleshy characteristics, perhaps echoing Its nature. The tissues bear novel organic products that can be refined with a Mixer."}
    ]},
    {"id": "whisper_wheat", "contents": [
      {"type": "text", "text": "Whisper Wheat\n", "bold": true},
      {"type": "text", "text": "Many who cultivate it report hearing terrifying cosmic secrets in the rustling of its sheaves."}
    ]},
    {"id": "blood_bubble_tree", "contents": [
      {"type": "text", "text": "Blood Bubble Tree\n", "bold": true},
      {"type": "text", "text": "Granting Enlightenment to a Crimson Fungus remakes its flesh. Instead of fruit, the tree bears membranous sacs filled with animal blood."}
    ]},
    {"id": "feeding_trough", "contents": [
      {"type": "text", "text": "Feeding Trough\n", "bold": true},
      {"type": "text", "text": "The Feeding Trough dispenses food to nearby livestock, encouraging them to reproduce. It has a radius of five blocks and must be filled with Animal Feed to operate.\n"},
      {"type": "text", "text": "Attaching a Motor will cause animals to breed at regular intervals. The time between feedings varies from 5s to 60s depending on the output power of the motor."}
    ]},

    {"id": "eldritch_enzymes", "contents": [
      {"type": "text", "text": "Eldritch Enzymes\n", "bold": true},
      {"type": "text", "text": "This product of the Gland Potato has many exotic properties and is well suited for mineral extraction."},
      {"type": "text", "text": "\nProduction\n", "bold": true},
      {"type": "text", "text": "Blending a gland potato in 333mb of water with a mixer will produce 333mb of Eldritch Enzymes."}
    ]
    },
    {"id": "trommel", "contents": [
      {"type": "text", "text": "Trommel\n", "bold": true},
      {"type": "text", "text": "This trommel lifts impurities from fats and meats as others might remove rocks from water. Mundane contaminants remain within the rotating mesh while the desired products drain away.\n"},
      {"type": "text", "text": "Dirty Ore Fat can be processed in the Trommel for an approximate 150% yield compared to directly pressing dirty fat."},
      {"type": "text", "text": "Tissue fluid produced via the disassembly of substrate organisms with a Large Mincer or Death Blades can be separated into Refined Meat with an extra chance of Assorted Biological Solids."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "Fluid is taken from any container placed top of the nearest block and outputs leave through the bottom of the far end."},
      {"type": "image", "width": 299, "height": 178, "path": "neepmeat:guide/images/trommel.png"},
      {"type": "text", "text": "A running motor must be connected for this machine to function."},
      {"type": "image", "width": 322, "height": 237, "path": "neepmeat:guide/images/trommel_image.png"}
    ]
    },
    {"id": "crucible", "contents": [
      {"type": "text", "text": "Rendering Basin\n", "bold": true},
      {"type": "text", "text": "The enlightened enzymes of the Gland Potato concentrate the fleshly nature of certain minerals into a layer of ethereal fat. Thus, rendering is an efficacious form of mineral extraction."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "To obtain ore fat, fill a Rendering Basin with eldritch enzymes and drop in raw ore from above. The ore fat will appear within an adjacent Fat Collector from which it can be extracted. Each unit of raw ore requires 333mb of Eldritch Enzymes to process."},
      {"type": "text", "text": "Rendering typically yields 33% more of the resource than smelting. Ingots can be formed from the dirty fat using a Hydraulic Press and a Pressing Basin."}
    ]
    },
    {"id": "collector", "contents": [
      {"type": "text", "text": "Fat Collector\n", "bold": true},
      {"type": "text", "text": "Fat collectors draw latent ethereal fats into their reservoirs."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "A Fat Collector must be placed with its arm facing a Rendering Basin. Provided enough Eldritch Enzymes are present in the basin, inserting any raw ore will produce its corresponding fat in the collector. Up to four Fat Collectors can be placed next to a single Rendering Basin to collect the fats from different ores."}
    ]},
    {"id": "press", "contents": [
      {"type": "text", "text": "Hydraulic Press\n", "bold": true},
      {"type": "text", "text": "When Ore Fats are subjected to high pressures, the transient corpulence is forced to de-manifest and fine metal ingots remain."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "If the press is placed above a Pressing Basin, it will begin extending if a valid fluid is in the basin. To make the arm extend, a bucket of any fluid can be pumped into either of the two side ports. To make the arm retract, this fluid must be pumped out."},
      {"type": "text", "text": "\nMilking\n", "bold": true},
      {"type": "text", "text": "To milk a cow, place it above a fluid drain and beneath a Hydraulic Press. As the cow is compressed, milk will be deposited in the drain."}
    ]},

    {"id": "brains", "contents": [
      {"type": "text", "text": "Brains\n", "bold": true},
      {"type": "text", "text": "Animal brains are a highly valuable resource. Thought can be reawakened with the application of Body Compound, making them useful for machines that require a small amount of intelligence."},
      {"type": "text", "text": "\nAcquisition\n", "bold": true},
      {"type": "text", "text": "It is sometimes possible to salvage the reanimated brain of a Zombie. \n\nFeeding an Enlightened Brain to a cow rapidly induces a condition known as bovine fungiform encephalopathy, where extra brains develop in the cow. These brains can be harvested, but the process is unfortunately fatal to the cow."}
    ]},
    {"id": "blood", "contents": [
      {"type": "text", "text": "Blood\n", "bold": true},
      {"type": "text", "text": "Blood is an important precursor for many industrial processes."},
      {"type": "text", "text": "\nAcquisition\n", "bold": true},
      {"type": "text", "text": "Blood can be obtained by disassembling a living entity with a Tissue Operator above a Drain. Alternatively, the fruit of the Blood Bubble tree can be pressed into a bucket or blended in a Mixer to obtain fresh blood."}
    ]},
    {"id": "meat", "contents": [
      {"type": "text", "text": "Refined Meat\n", "bold": true},
      {"type": "text", "text": "As well as a being a nourishing food, Refined Meat is the precursor to Meat Steel."},
      {"type": "text", "text": "\nAcquisition\n", "bold": true},
      {"type": "text", "text": "Crushing any item of impure meat in a Crusher will produce 1-2 meat scraps. Nine of these can be crafted into a Raw Meat Brick."},
      {"type": "text", "text": "\nRefined Meat in its liquid form comes from purifying Tissue Slurry in the Trommel. Tissue slurry is obtained through the disassembly of substrate organisms using a Mincer or Death Blades. Liquid Meat can be converted into solid bricks using a Hydraulic Press."}
    ]},
    {"id": "verrucous_rocks", "contents": [
      {"type": "text", "text": "Verrucous Rocks\n", "bold": true},
      {"type": "text", "text": "Due to the increasing abundance of Enlightened animalcules in the environment, it is common for rocks to develop biological characteristics and grow into wart-like structures."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "The glandular secretion of verrucous rocks is an analogue of Ethereal Fuel, and can be used to power machines. The fluid often seeps from sores in the rock's hard surface. Fluid can be redirected with pipes and used as a passive power source. Multiple sores can be present in a single rock."}
    ]},
    {"id": "integrator", "contents": [
      {"type": "text", "text": "Integrator Organism\n", "bold": true},
      {"type": "text", "text": "An Integrator is a biomechanical information processing system intended to ease the production of machines. Designed to withstand high quantities of inhuman knowledge, Integrators can confer this information to certain substances, ascending them to Enlightened forms."},
      {"type": "text", "text": "\nAcquisition\n", "bold": true},
      {"type": "text", "text": "The technology to produce Integrators is long-lost, but their eggs can still be found in dungeons. To hatch an Integrator Egg, place it in a comfy place and pump in a bucketful of blood. After a short time, the Integrator will hatch."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "Each Integrator has an internal reservoir of Enlightenment that is gradually filled as it listens to the cosmos. Feeding the organism with Whisper Flour will quickly fill this reservoir."}
    ]},
    {"id": "enlightening", "contents": [
      {"type": "text", "text": "Enlightening\n", "bold": true},
      {"type": "text", "text": "Enlightenment brings about great changes in objects that can withstand it. Many organisms exist whose Enlightened forms have industrial applications."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "To enlighten an item, place it in a Pedestal that is connected via data cables to a mature Integrator. If the item is valid, the Integrator will manifest a cosmic beam that confers eldritch wisdom to the item. This process takes approximately 12% of the Integrator's stored Enlightenment."}
    ]},
    {"id": "charnel_compactor", "contents": [
      {"type": "text", "text": "Charnel Compactor\n", "bold": true},
      {"type": "text", "text": "The Charnel Compactor produces Body Compound from raw meat. This coming together of diverse tissues is a sacrament. With the blessing of Enlightenment, dead organs can be half-imbued with life and can go on to create all manner of new machines."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "Like a composter, raw materials can be inserted by right-clicking or through hoppers and pipes into the top of the block. If the compactor is full and connected to an Integrator via Data Cables, a Integration Fluid Compound Cartridge will be produced. This can be extracted via hoppers and pipes from the block's bottom face."}
    ]},

    {"id": "fluid_pipe", "contents": [
      {"type": "text", "text": "Fluid Pipes\n", "bold": true},
      {"type": "text", "text": "Fluid pipes are a simple way of transferring fluids from one block to another."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "Pipes connect to any block that can accept fluids, although some blocks only allow connections in certain directions."},
      {"type": "text", "text": "For fluids to move through pipes, there must be a height difference or an active pump. Fluids obey gravity, so they will naturally flow from containers at higher elevations to lower ones. Flow can also be induced by placing Redstone Pumps along the desired path of flow."},
      {"type": "text", "text": "\nBehaviour\n", "bold": true},
      {"type": "text", "text": "Pipes have a maximum flow rate of 10125d (1/8 buckets) per tick. When no pumps are present, fluids can move downwards and horizontally. Pipes will fill up when all paths are blocked.\n"}
    ]},
    {"id": "valves", "contents": [
      {"type": "text", "text": "Check Valve\n", "bold": true},
      {"type": "text", "text": "Check valves only allow fluids to pass in one direction. The permitted direction is indicated by the arrow on the casing."},
      {"type": "text", "text": "\nStop Valve\n", "bold": true},
      {"type": "text", "text": "Stop valves completely halt the flow through them when closed. They can be toggled by right-clicking or with redstone."},
      {"type": "text", "text": "\nFilter Pipe\n", "bold": true},
      {"type": "text", "text": "Filter pipes only allow a specific fluid type to pass. By default, all fluids will be permitted. The filter can be changed by right-clicking the block with any container that holds the desired fluid."},
      {"type": "text", "text": "\nFlow Control Valve\n", "bold": true},
      {"type": "text", "text": "This pipe allows the maximum flow rate to be configured. Right-clicking opens a GUI that allows the rate to be set. Note that this value cannot exceed the maximum flow rate of other pipes.."}
    ]},
    {"id": "flex_tank", "contents": [
      {"type": "text", "text": "Flex Tanks\n", "bold": true},
      {"type": "text", "text": "Adjacent flex tanks share a single fluid reservoir."},
      {"type": "text", "text": "They are available in basic and advanced forms which hold 8 and 16 buckets per block respectively."}
    ]},
    {"id": "fluid_drain", "contents": [
      {"type": "text", "text": "Fluid Drain\n", "bold": true},
      {"type": "text", "text": "The Fluid Drain transfers fluid blocks and from the world into its internal buffer. It also collects blood and meat from entities disassembled above it with a Tissue Operator."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "Every 16 ticks, the drain will consume a source block that is directly above it or is connected via flowing blocks.The internal buffer holds eight buckets."}
    ]},
    {"id": "fluid_interface", "contents": [
      {"type": "text", "text": "Fluid Interface\n", "bold": true},
      {"type": "text", "text": "The Fluid Interface acts as a proxy for the fluid storage of the block it is facing. Inserting or extracting fluids from it is equivalent to inserting or extracting directly from the targeted block, making it useful for plumbing in confined spaces."}
    ]},
    {"id": "fluid_rationer", "contents": [
      {"type": "text", "text": "Fluid Rationer\n", "bold": true},
      {"type": "text", "text": "The Fluid Rationer extracts discrete amounts of fluid from an adjacent tank and ejects it into a connected pipe network. The extracted amount and filter can be specified in the GUI."},
      {"type": "image", "width": 278, "height": 121, "path":  "neepmeat:guide/images/fluid_rationer_use.png"},
      {"type": "text", "text": "The machine will wait until all fluid has left its internal buffer before extracting from the tank again. This can be useful for systems that can only process fluids in certain amounts, such as ingot forming."}
    ]},

    {"id": "item_pipe", "contents": [
      {"type": "text", "text": "Item Pipes\n", "bold": true},
      {"type": "text", "text": "Item pipes swiftly transport stacks of items between inventories."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "These pipes cannot be inserted into through regular means. Instead, Items must be injected using an Item Pump or an Ejector. Some other blocks, such as the Crusher and the Assembler, can eject items directly into pipes. Pipes can insert items into any valid block and can drop items into the world if an end is left open."},
      {"type": "text", "text": "Compatible blocks will check ahead for a valid destination before ejecting items into pipes. If an item reaches a dead end it will back into the network."},
      {"type": "text", "text": "\nRight-clicking a pipe's connection with an empty hand will toggle that connection."}
    ]},
    {"id": "ejector", "contents": [
      {"type": "text", "text": "Ejector\n", "bold": true},
      {"type": "text", "text": "When powered with redstone, the ejector transfers one item every 10 ticks from a connected inventory into a pipe."},
      {"type": "text", "text": "\nItem Pump\n", "bold": true},
      {"type": "text", "text": "The Item Pump behaves similarly to the Ejector, but ejects 16 items at a time. It can also retrieve items from multiple connected inventories. Both machines check for a valid destination before extracting an item.\n"},
      {"type": "image", "width": 128, "height": 32, "path": "neepmeat:guide/images/ejector.png"},
      {"type": "ctext", "text": "\nThis Ejector will extract items from the barrel.\n"},
      {"type": "image", "width": 128, "height": 32, "path": "neepmeat:guide/images/item_pump.png"}
    ]},
    {"id": "router", "contents": [
      {"type": "text", "text": "Item Router\n", "bold": true},
      {"type": "text", "text": "The Item Sorter distributes incoming items to neighbouring pipes. In the GUI, each coloured filter slot corresponds to an output direction."}
    ]},
    {"id": "pipe_driver", "contents": [
      {"type": "text", "text": "Pipe Driver\n", "bold": true},
      {"type": "text", "text": "The Pipe Driver enables advanced routing in a pipe network when connected. This allows item requests to be sent by PLCs and Manual Requesters to be fulfilled by enabled pipes elsewhere in a network. Only one Pipe Driver can be present in a single pipe network."}
    ]},
    {"id": "storage_driver", "contents": [
      {"type": "text", "text": "Storage Driver\n", "bold": true},
      {"type": "text", "text": "The Storage Driver allows adjacent item storages to fulfil item requests sent through a pipe network. A single Pipe Driver must be connected to the network to function."}
    ]},
    {"id": "dumper", "contents": [
      {"type": "text", "text": "Smart Dumper\n", "bold": true},
      {"type": "text", "text": "The Smart Dumper drops items from its inventory directly below it. Items are only dropped if the inventory below can receive them. The internal inventory holds a single stack and items can be removed by interacting with an empty hand. Powering the dumper with redstone prevents it from dropping items."},
      {"type": "image", "width": 96, "height": 96, "path": "neepmeat:guide/images/dumper.png"},
      {"type": "ctext", "text": "This Smart Dumper will only drop items when the Rendering Basin below can accept them.\n"}
    ]},

    {"id": "assembler", "contents": [
      {"type": "text", "text": "Assembler\n", "bold": true},
      {"type": "text", "text": "The assembler enforces a particular pattern of items in the inventory below it. This can be used to automatically fill out recipes for crafting or smelting. It requires a vascular network to run."},
      {"type": "image", "width": 224, "height": 124, "scale": 0.9, "path": "neepmeat:guide/images/assembler.png"},
      {"type": "text", "text": "In the GUI, there are four blocks of slots. The first block is a read-only view of the inventory below, the second defines the desired pattern, the third contains recipe resources and the fourth is auxiliary output. Placing items into the green slots creates a pattern that the Assembler will try to replicate using items in the blue slots.\n"},
      {"type": "text", "text": "Clicking any red or green slot with 'Select Output Slots' enabled will cause the Assembler to extract recipe products from it. Assigning an item to the corresponding pattern slot, as shown above, will ensure that only the correct recipe product will be removed."},
      {"type": "text", "text": "For crafting, the Persistent Crafting Table must be used, as a regular Crafting Table does not retain its items."}
    ]},
    {"id": "heater", "contents": [
      {"type": "text", "text": "Heater\n", "bold": true},
      {"type": "text", "text": "The Heater warms any furnace-like block that it faces, allowing it to smelt items without fuel. It can also oxidise copper blocks that are exposed to Patina Treatment. It must be connected directly to a vascular network to function.\n"},
      {"type": "text", "text": "Fluid Heating\n", "bold": true},
      {"type": "text", "text": "When facing a Multi-Tank, fluids can be heated. This can be used to pasteurise Milk or to cook Meat Slurry. The power output of the heater influences the processing rate.\n"}
    ]},

    {"id": "living_machines", "contents": [
      {"type": "text", "text": "Living Machines\n", "bold": true},
      {"type": "text", "text": "Usage\n", "bold": true},
      {"type": "text", "text": "A living machine consists of a controller and set of functional components that are connected together with machine blocks. The process that a machine performs is determined by its functional components. For example, a crusher needs an item input, an item output, one or more crusher segments and a motor port. Some processes can use extra components to achieve different effects."},
      {"type": "text", "text": "The operating parameters of a machine are determined by the machine blocks it is composed of.\n"},
      {"type": "text", "text": "Ageing\n", "bold": true},
      {"type": "text", "text": "Machines have a maximum rated power and operating a machine above 75% of this value will cause gradual degradation over time, which will eventually result in total failure."},
      {"type": "text", "text": "To mitigate the effects of ageing, machine blocks with self-repair capabilities can be used."}
    ]},
    {"id": "phage_ray", "contents": [
      {"type": "text", "text": "Phage Ray\n", "bold": true},
      {"type": "text", "text": "The Phage Ray unleashes a concentrated beam of destruction that can rapidly destroy many blocks.\n"},
      {"type": "text", "text": "Usage\n", "bold": true},
      {"type": "text", "text": "The Phage Ray is a machine component, so it requires a connected Machine Controller before it can run. When a valid structure is formed, 100eJ/t [note: this will change] must be supplied to the base using a vascular network. The barrel assembly can be mounted by right-clicking. Once mounted, right-clicking will activate the ray. \n"},
      {"type": "text", "text": "With no extra components, the ray will destroy blocks completely. Installing a Harvest Extractor causes drops to be deposited into a connected Item Output."},
      {"type": "text", "text": "\nRequired Components"},
      {"type": "text", "text": "- Phage Ray"},
      {"type": "text", "text": "\nOptional Components"},
      {"type": "text", "text": "- Harvest Extractor"},
      {"type": "text", "text": "- Item output"}
    ]},
    {"id": "crusher_segment", "contents": [
      {"type": "text", "text": "Crusher Segment\n", "bold": true},
      {"type": "text", "text": "The Large Crusher provides superior efficiency and yield than its smaller counterpart.\n"},
      {"type": "text", "text": "Usage\n", "bold": true},
      {"type": "text", "text": "Up to four Crusher Segments can be part of a machine. Each segment runs at the same speed, so adding more segments increases efficiency.\n"},
      {"type": "text", "text": "\nRequired Components"},
      {"type": "text", "text": "- Crusher Segment (up to four)"},
      {"type": "text", "text": "- Item Input (Large Hopper)"},
      {"type": "text", "text": "- Item Output"},
      {"type": "text", "text": "- Motor Port"},
      {"type": "text", "text": "\nOptional Components"},
      {"type": "text", "text": "- Lucky One (increases yield of extra outputs)"}
    ]},
    {"id": "large_trommel", "contents": [
      {"type": "text", "text": "Large Trommel\n", "bold": true},
      {"type": "text", "text": "The Large Trommel processes fluids more efficiently.\n"},
      {"type": "text", "text": "Usage\n", "bold": true},
      {"type": "text", "text": "Only one Large Trommel mesh is allowed per machine. Multiple fluid inputs and outputs are permitted.\n"},
      {"type": "text", "text": "\nRequired Components"},
      {"type": "text", "text": "- Large Trommel"},
      {"type": "text", "text": "- Fluid Input"},
      {"type": "text", "text": "- Fluid Output"},
      {"type": "text", "text": "- Item Output"},
      {"type": "text", "text": "- Motor Port"}
    ]},
    {"id": "charnel_pump", "contents": [
      {"type": "text", "text": "Charnel Pump\n", "bold": true},
      {"type": "text", "text": "Integration Fluid can be induced to seek out precious minerals and engulf them. When injected at high pressure into a rock formation, the fluid will force apart minute fractures, allowing it animalcules to digest the newly exposed mineral deposits. \n\nThe Charnel Pump performs these functions and encourages the fluid to return to the surface once saturated."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "The Charnel pump is a functional component eight blocks tall with a diameter of three blocks. It requires a controller, a motor port and two fluid input ports: one for compressed air and one for Integration Fluid. A motor must deliver over 500eJ/t for the Charnel Pump to run. Each pumping cycle will consume 1/3 buckets of Integration Fluid."},
      {"type": "text", "text": "\nWhen the pump is first turned on, the surface will be breached by a spout of writhing earth nearby. A Well Head must be placed on this to receive the resources liberated from the earth."}
    ]},
    {"id": "large_compressor", "contents": [
      {"type": "text", "text": "Large Compressor\n", "bold": true},
      {"type": "text", "text": "The Large Compressor is a functional component that produces compressed air. It requires a motor port. Compressed air is ejected from the top of the machine."}
    ]},
    {"id": "tree_vacuum", "contents": [
      {"type": "text", "text": "Tree Vacuum\n", "bold": true},
      {"type": "text", "text": "This machine produces a terrifying suction that allows it to rapidly engulf entire trees as though they are spaghetti."},
      {"type": "text", "text": "\nUsage\n", "bold": true},
      {"type": "text", "text": "The Tree Vacuum is a functional component. It requires a controller, a motor port and an item output port."},
      {"type": "text", "text": "When the machine is running and its maw faces a tree, it will consume the tree and eject the materials via the output port."}
    ]},

    {"id": "cloning", "contents": [
      {"type": "text", "text": "Cloning\n", "bold": true},
      {"type": "text", "text": "The essential Saltes of Animals may be so prepared and preserved, that an ingenious Man may have the whole Ark of Noah in his own Studie, and raise the fine Shape of an Animal out of its Ashes at his Pleasure.", "italic": true},
      {"type": "text", "text": "                                         - Borellus\n"},
      {"type": "text", "text": [{"text":"To obtain "},{"text":"Essential Saltes","italic":true},{"text":" of an organism, it must be exposed to an Ash Preparation potion and then incinerated. This procedure will succeed even if the organism has an innate resistance to fire, but the disassembly will have to be manual."}]},
      {"type": "text", "text": [{"text": "\nEssential Saltes ", "italic": true},{"text": "can be used in an Oviparous Synthesiser to produce eggs."}]}
    ]},
    {"id": "synthesiser", "contents": [
      {"type": "text", "text": "Oviparous Synthesiser\n", "bold": true},
      {"type": "text", "text": "To cast off the vestige of nature is to inch towards revelation; to replicate the natural forms of flesh - finding wisdom in their madness - is to step towards Enlightenment.\n"},
      {"type": "text", "text": "Usage\n", "bold": true},
      {"type": "text", "text": [{"text": "The Oviparous Synthesiser creates eggs of a template organism through its "},{"text": "Essential Saltes.","italic": true},{"text": "Right-clicking the machine with the corresponding "},{"text": "Essential Saltes ","italic": true},{"text": "will install or remove the template."}]},
      {"type": "text", "text": "In order to operate, the machine must be fed Refined Meat and body compound. The amount of meat to produce an egg varies depending on the size of the organism.\n"},
      {"type": "text", "text": "Eggs\n", "bold": true},
      {"type": "text", "text": "Eggs can be moved in standard ways, such as with water streams and pistons. They can also be picked up as items by hitting them. Immersion in blood will trigger eggs to hatch.\n"}
    ]},

    {"id": "plc", "contents": [
      {"type": "text", "text": "Programmable Logic Controller\n", "bold": true},
      {"type": "text", "text": "The PLC is a computer specialised for industrial automation. It can run user-defined programs or run instructions one by one in an interactive mode. Its clock speed is a lightning fast 20Hz."},
      {"type": "text", "text": "\nRight-clicking on the PLC gives control over its robot."},
      {"type": "text", "text": "\nUser Interface\n", "bold": true},
      {"type": "text", "text": "When inside the robot, movement is accomplished using the normal keys. Middle click-dragging rotates the camera."},
      {"type": "text", "text": "\nThe PLC has two modes: interactive mode and edit mode. The current mode can be switched using the button on the top right of the screen."},
      {"type": "text", "text": "\nTo execute an instruction in Interactive Mode, select the desired operation from the bottom right panel. Then, click blocks in the world to add them as arguments. When sufficient arguments are provided, an instruction emitted and executed."},
      {"type": "text", "text": "\nIn Edit Mode, the program is written in the left panel in NEEPASM. More instructions are available in this mode. These are outlined in the bottom right pane."},
      {"type": "text", "text": "The buttons at the top right of the screen allow programs to be compiled, started and stopped."}
    ]},
    {"id": "plc_instructions", "contents": [
      {"type": "text", "text": "PLC Instructions\n", "bold": true},
      {"type": "text", "text": "\nInstructions consist of an operation and a series of arguments. These arguments are positions in the world."},
      {"type": "text", "text": "\nInstructions can have a variable number of arguments. Some, such as END and RESTART have zero arguments."},
      {"type": "text", "text": "\nCertain arguments have to meet specific criteria, such as being item or fluid inventories. For example, COMBINE takes one item storage and one item workbench. If an invalid block is selected, the argument will be rejected."}
    ]},
    {"id": "plc_workbenches", "contents": [
      {"type": "text", "text": "PLC Workbenches\n", "bold": true},
      {"type": "text", "text": "Workbenches allow items and entities to be modified on by a PLC robot."},
      {"type": "text", "text": "\nExamples:"},
      {"type": "text", "text": "- Display Platform (item)"},
      {"type": "text", "text": "- Pedestal (item)"},
      {"type": "text", "text": "- Surgery Platform (entity)"},
      {"type": "text", "text": "\nNot all instructions require workbenches. Some operate on normal item or fluid inventories."}
    ]},
    {"id": "neepasm", "contents": [
      {"type": "text", "text": "NEEPASM\n", "bold": true},
      {"type": "text", "text": "NEEPASM is an assembly language for the NEEP PLC. Due to the PLC's Enlightened instruction set, the language can be slightly more user-friendly than most assembly languages."},
      {"type": "text", "text": "\nGenerally, programs are lists of instructions that are executed one after the other.\nInstructions can take a variety of arguments, such as: \n\n- Strings: \"a string\"\n- Integers: 123, 0x7B, 0b1111011\n- World targets: @(<x>, <y>, <z>, <direction>)."},
      {"type": "text", "text": "\nWorld targets represent a block in the world and are used to tell instructions where to extract or insert fluids or items."},
      {"type": "text", "text": "\nAnything occurring after a '#' character on a line is treated as a comment:\n"},
      {"type": "code", "text": "say \"Hello\"  # A comment"},
      {"type": "text", "text": "\nFlow control is accomplished by jumping between labels:\n"},
      {"type": "code", "text": "a_label:"},
      {"type": "code", "text": "say \"Hello\""},
      {"type": "code", "text": "jmp a_label"},
      {"type": "text", "text": "\nCommonly used groups of instructions can be defined in functions and world targets can be named using aliases:\n"},
      {"type": "code", "text": "%alias an_alias = @(1 2 3 NORTH)"},
      {"type": "code", "text": "%func a_function"},
      {"type": "code", "text": "\tsay \"A useful action\""},
      {"type": "code", "text": "%end"}

    ]},
    {"id": "stack", "contents": [
      {"type": "text", "text": "The Stack\n", "bold": true},
      {"type": "text", "text": "The PLC has a stack for storing integers. Elements can be added and removed only from the top of the stack using the PUSH and POP instructions respectively.\nThe comparison and arithmetic instructions take their arguments directly from the stack:\n"},
      {"type": "code", "text": "push 1  # Place 1 on the stack"},
      {"type": "code", "text": "push 2"},
      {"type": "code", "text": "add     # Add the last two entries"},
      {"type": "code", "text": "inc     # Increment the last stack entry"},
      {"type": "code", "text": "push 4"},
      {"type": "code", "text": "eq      # Test equality for 4 and 4"},
      {"type": "code", "text": "say     # Say the result"}
    ]},
    {"id": "labels", "contents": [
      {"type": "text", "text": "Labels and Branches\n", "bold": true},
      {"type": "text", "text": "Labels are permanent marks in the program that can be returned to using the jump instructions: JMP, BIF and BIT.\nFor example, the following proram enters an infinite loop:\n"},
      {"type": "code", "text": "a_label:  # Define a label"},
      {"type": "code", "text": "say \"loop\""},
      {"type": "code", "text": "jmp a_label"},
      {"type": "text", "text": "\nLabels can be reused. Adding 'f' or 'b' to the end of a branch instruction tries to find the label by looking forwards or backwards respectively:\n"},
      {"type": "code", "text": "a_label:"},
      {"type": "code", "text": "jmp a_label f  # Jump forwards"},
      {"type": "code", "text": "say \"Skip this instruction\""},
      {"type": "code", "text": "a_label:"},
      {"type": "code", "text": "say \"Yay\""}
    ]},
    {"id": "functions", "contents": [
      {"type": "text", "text": "Functions and Aliases\n", "bold": true},
      {"type": "text", "text": "Functions encapsulate procedures that can be executed multiple times."},
      {"type": "text", "text": "\nA function is declared by surrounding instructions with %func and %end directives:\n"},
      {"type": "code", "text": "%func a_function"},
      {"type": "code", "text": "say \"Inside the function\""},
      {"type": "code", "text": "%end"},
      {"type": "code", "text": "a_function  # Call the function"},
      {"type": "text", "text": "\nAliases can be used to assign names to certain world targets. Aliases are recalled by prefixing their name with '$':\n"},
      {"type": "code", "text": "%alias redstone_input = @(12 32 12 NORTH)"},
      {"type": "code", "text": "rwait $redstone_input  # Wait for redstone"}
    ]},
    {"id": "macros", "contents": [
      {"type": "text", "text": "Macros\n", "bold": true},
      {"type": "text", "text": "Macros are sections of code that can be inserted into the program where they are referenced as an instruction. Unlike a function, the entire macro is expanded and inserted into the program whenever it is referenced. Macros can also have any number of parameters that are substituted for the given arguments on expansion."},
      {"type": "text", "text": "\nA macro is declared by surrounding instructions with %macro and %end directives:\n"},
      {"type": "code", "text": "%macro a_macro"},
      {"type": "code", "text": "  say \"This is a macro\""},
      {"type": "code", "text": "%end"},
      {"type": "code", "text": "a_macro  # Expand the macro"},
      {"type": "text", "text": "\nArguments are defined with a space-separated list after the macro's name. They can be referenced within the macro by prefixing their names with %:\n"},
      {"type": "code", "text": "%macro a_macro message something_else"},
      {"type": "code", "text": "  say \"The message: %message\"  # Replace %message"},
      {"type": "code", "text": "  say \"%something_else\""},
      {"type": "code", "text": "%end"},
      {"type": "code", "text": "a_macro Hello there, Something else"},
      {"type": "text", "text": "\nAs shown above, arguments supplied when expanding the macro must be separated by commas. This allows spaces in the arguments you provide. Any text can be a macro argument, including aliases.\nThe above example will say 'Hello there.' and then 'Something else'."},
      {"type": "text", "text": "\nA more complex example follows. This will check whether the input slots of two furnaces have less than 8 items in and will transfer 8 items from the input storage if this is the case.\n"},
      {"type": "code", "text": "%alias input = @(1 2 1 U)"},
      {"type": "code", "text": "%alias furn1 = @(1 2 3 U)"},
      {"type": "code", "text": "%alias furn2 = @(1 2 4 U)"},
      {"type": "code", "text": "\n%macro check_furnace furnace"},
      {"type": "code", "text": "  count %furnace"},
      {"type": "code", "text": "  push 8; gteq"},
      {"type": "code", "text": "  bit continue f"},
      {"type": "code", "text": "  move $input %furnace 8"},
      {"type": "code", "text": "  continue:"},
      {"type": "code", "text": "%end"},
      {"type": "code", "text": ""},
      {"type": "code", "text": "check_furnace $furn1"},
      {"type": "code", "text": "check_furnace $furn2"},
      {"type": "code", "text": "restart"}
    ]},

    {"id": "implants", "contents": [
      {"type": "text", "text": "Implants\n", "bold": true},
      {"type": "text", "text": "Implants provide new abilities to organisms, elevating them beyond the fickle whims of nature."},
      {"type": "text", "text": "\nExamples:\n"},
      {"type": "text", "text": "- Extra Knees"},
      {"type": "text", "text": "- Pineal Eye"},
      {"type": "text", "text": "- Divine Chrysalis", "strikethrough": true},
      {"type": "text", "text": "- Lung Extensions"},
      {"type": "text", "text": "- Extra Mouth"},
      {"type": "text", "text": "\nImplants are applied to entities using the IMPLANT instruction. The entity must be standing on a Surgery Platform."}
    ]},
    {"id": "implant_manager", "contents": [
      {"type": "text", "text": "Implant Manager\n", "bold": true},
      {"type": "text", "text": "The Implant Manager allows previously installed implants to be removed."},
      {"type": "text", "text": "The machine does not require power, but it must face a PLC workbench containing the target item or entity. To remove an implant from an entity, the Implant Manager must be facing a Surgery Platform on which the entity is standing."}
    ]},

    {"id": "airtruck", "contents": [
      {"type": "text", "text": "Airtruck\n", "bold": true},
      {"type": "text", "text": "The Airtruck is a flying vehicle that can carry one pilot and a passenger. Mobs will board the vehicle when they collide with it, much like a with a boat.\nAll the controls are the same as in creative flight except for the down key, which is '\\' by default. Shift-right clicking will disassemble the vehicle."}
    ]},

    {"id": "assault_drill", "contents": [
      {"type": "text", "text": "Assault Drill\n", "bold": true},
      {"type": "text", "text": "The Assault Drill is a drill rated for offensive use. It continuously damages entities with a range of one block. \n"},
      {"type": "text", "text": "The drill runs on Ethereal Fuel. To refuel, right-click on a container of Ethereal Fuel or use a bottler. This item can also be enchanted to increase its damage output."}
    ]},

    {"id": "halberd", "contents": [
      {"type": "text", "text": "Halberd\n", "bold": true},
      {"type": "text", "text": "The halberd is a module for the Staff base. It has a number of different melee attacks.\n"},
      {"type": "text", "text": "When unmounted:"},
      {"type": "text", "text": "Attack 1: Charges if held while sprinting. When released, the user leaps forwards a number of blocks, damaging entities in the way."},
      {"type": "text", "text": " Base damage: 6"},
      {"type": "text", "text": "Attack 2: Attacks the targeted entity."},
      {"type": "text", "text": " Base damage: 7"},
      {"type": "text", "text": " Range: 3"},
      {"type": "text", "text": "When mounted:\n"},
      {"type": "text", "text": "- Attack 1: ."}
    ]}
  ]
}
