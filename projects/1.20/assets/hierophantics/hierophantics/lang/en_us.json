{
	"block.hierophantics.flay_bed": "Imbuement Bed",
	"block.hierophantics.edified_workstation": "Edified Workstation",

	"command.hierophantics.add_mind": "Added new embdded mind to %s",
	"command.hierophantics.disable": "Disabled %s's embedded minds",

	"entity.minecraft.villager.quiltmind": "Quiltmind",
	"entity.minecraft.villager.hierophantics.quiltmind": "Quiltmind",

	"subtitles.hierophantics.hieromind_cast": "Embedded mind casts",

	"text.autoconfig.hierophantics.title": "Hierophantics Config",
	"text.autoconfig.hierophantics.option.server.maxMinds": "Maximum embedded minds per player",

	"advancements.hierophantics.embed_mind.title": "Interwoven",
	"advancements.hierophantics.embed_mind.description": "Embed a villager's mind into your own",
	"advancements.hierophantics.waste_mind.title": "Atomized",
	"advancements.hierophantics.waste_mind.description": "Waste a mind by activating an Imbuement Bed with no one in it",
	"advancements.hierophantics.all_triggers.title": "Ready for Anything",
	"advancements.hierophantics.all_triggers.description": "Have an embedded mind with each possible trigger type",
	"advancements.hierophantics.fuse_villagers.title": "Two Into One",
	"advancements.hierophantics.fuse_villagers.description": "Embed a villager's mind into another villager",

	"hierophantics.tooltip.mind_reference": "Embedded Mind \"%s\"",
	"hierophantics.tooltip.trigger": "Trigger: When %s",
	"hierophantics.tooltip.mishap_thrower": "Hierophantics Mishap Thrower",

	"hierophantics.tooltip.trigger_type.damage": "damaged",
	"hierophantics.tooltip.trigger_type.damage_typed": "damaged by '%s'",
	"hierophantics.tooltip.trigger_type.health": "health drops below %d",
	"hierophantics.tooltip.trigger_type.breath": "breath drops below %d",
	"hierophantics.tooltip.trigger_type.hunger": "hunger drops below %d",
	"hierophantics.tooltip.trigger_type.velocity": "velocity greater than %d",
	"hierophantics.tooltip.trigger_type.fall": "falling more than %d blocks",
	"hierophantics.tooltip.trigger_type.drop": "item dropped",
	"hierophantics.tooltip.trigger_type.attack": "entity struck",
	"hierophantics.tooltip.trigger_type.break": "block broken",
	"hierophantics.tooltip.trigger_type.jump": "jumping",
	"hierophantics.tooltip.trigger_type.teleport": "teleporting",

	"hexcasting.mishap.hierophantics:mind_freed": "Tried to interact with an embedded mind that doesn't exist",
	"hexcasting.mishap.hierophantics:minds_disabled.yours": "Your embedded minds are too unstable to %s!",
	"hexcasting.mishap.hierophantics:minds_disabled.other": "This embedded mind is too unstable to %s!",
	"hexcasting.mishap.hierophantics:not_your_mind": "Can't modify an embedded mind that isn't yours",
	"hexcasting.mishap.hierophantics:minds_capped": "%s already has the maximum number of embedded minds",
	"hexcasting.mishap.hierophantics:nitwit_imbuement": "%s does not have enough mind to imbue",
	"hexcasting.mishap.invalid_value.class.mind_reference": "an embedded mind",
	"hexcasting.mishap.invalid_value.class.trigger": "a trigger",

	"hierophantics.mishap.minds_disabled.action.cast": "function",
    "hierophantics.mishap.minds_disabled.action.read": "examine",
	"hierophantics.mishap.minds_disabled.action.write": "modify",
	"hierophantics.mishap.minds_disabled.action.free": "interact with",

	"hexcasting.action.hierophantics:get_minds": "Hierophant's Reflection",
	"hexcasting.action.hierophantics:reenable_minds": "Stabilize Minds",
	"hexcasting.action.hierophantics:set_mind_hex": "Payload Gambit",
	"hexcasting.action.hierophantics:get_mind_hex": "Payload Purification",
	"hexcasting.action.hierophantics:set_mind_trigger": "Trigger Gambit",
	"hexcasting.action.hierophantics:get_mind_trigger": "Trigger Purification",
	"hexcasting.action.hierophantics:free_mind": "Free Mind",
	"hexcasting.action.hierophantics:make_damage_trigger": "Trigger Reflection: Damage",
	"hexcasting.action.hierophantics:make_damage_type_trigger": "Trigger Reflection: Damage Type",
	"hexcasting.action.hierophantics:make_health_trigger": "Trigger Purification: Health",
	"hexcasting.action.hierophantics:make_breath_trigger": "Trigger Purification: Breath",
	"hexcasting.action.hierophantics:make_hunger_trigger": "Trigger Purification: Hunger",
	"hexcasting.action.hierophantics:make_velocity_trigger": "Trigger Purification: Velocity",
	"hexcasting.action.hierophantics:make_fall_trigger": "Trigger Purification: Fall",
	"hexcasting.action.hierophantics:make_drop_trigger": "Trigger Reflection: Drop",
	"hexcasting.action.hierophantics:make_attack_trigger": "Trigger Reflection: Attack",
	"hexcasting.action.hierophantics:make_break_trigger": "Trigger Reflection: Break",
	"hexcasting.action.hierophantics:make_jump_trigger": "Trigger Reflection: Jump",
	"hexcasting.action.hierophantics:make_teleport_trigger": "Trigger Reflection: Teleport",
	
	"hexcasting.action.book.hierophantics:make_damage_trigger": "Trigger Rfln: Damage",
	"hexcasting.action.book.hierophantics:make_damage_type_trigger": "Trigger Rfln: DmgType",
	"hexcasting.action.book.hierophantics:make_health_trigger": "Trigger Prfn: Health",
	"hexcasting.action.book.hierophantics:make_breath_trigger": "Trigger Prfn: Breath",
	"hexcasting.action.book.hierophantics:make_hunger_trigger": "Trigger Prfn: Hunger",
	"hexcasting.action.book.hierophantics:make_velocity_trigger": "Trigger Prfn: Velocity",
	"hexcasting.action.book.hierophantics:make_fall_trigger": "Trigger Prfn: Fall",
	"hexcasting.action.book.hierophantics:make_drop_trigger": "Trigger Rfln: Drop",
	"hexcasting.action.book.hierophantics:make_attack_trigger": "Trigger Rfln: Attack",
	"hexcasting.action.book.hierophantics:make_break_trigger": "Trigger Rfln: Break",
	"hexcasting.action.book.hierophantics:make_jump_trigger": "Trigger Rfln: Jump",
	"hexcasting.action.book.hierophantics:make_teleport_trigger": "Trigger Rfln: Teleport",

	"hierophantics.page.hierophantics.title": "Hierophantics",
	"hierophantics.page.hierophantics.0": "If _media can be seen as threads, if minds can be seen as tangles of such threads, then what is to stop me from weaving them together?$(br2)Thus far, when extracting the minds of villagers, I have inserted them only into artificial subtrates, but I can do better. I can $(o)become$() better.",
	"hierophantics.page.hierophantics.1": "By weaving additional minds into my own, I will gain the ability to cast _Hexes without requiring any conscious thought! I can simply $(l:patterns/mind_handling)provide$() a _Hex, and a $(l:patterns/triggers)condition$() under which to cast it, and the embedded mind will handle the rest on its own. With all the bothers of everyday life automatically handled, I can finally dedicate myself to whatever I... whatever we...$(br2)...what am I?",
	"hierophantics.page.hierophantics.2": "Focus, focus. There is a snag in the plan. I cannot modify the structure of my own mind midway through a _Hex without running the risk of unraveling it entirely – and I am not yet $(o)that$() insane.$(br2)Thus, I require some artifice. I can create a bed of sorts which, when provided with an extracted mind via the usual process, can weave it into my psyche without requiring any cognition on my part.",
	"hierophantics.page.hierophantics.craft": "I can then use some $(l:greatwork/impetus)$(item)external device$() to perform the extraction itself, transferring the mind into the bed while I simply lay there until the process – the $(o)integration$() – is complete.",
	"hierophantics.page.hierophantics.flay": "The process requires a master-level villager, which can be transferred into either of the two blocks that make up the $(item)Imbuement Bed$(). However, if I am not in the bed at the moment the spell is cast, the mind will be wasted.",

	"hierophantics.page.villager_enhancement.title": "Villager Enhancement",
	"hierophantics.page.villager_enhancement.0": "Many of my recent constructs require a sufficiently developed mind. Thus far, such development has only been possible by submitting to the demands of villagers, and providing them with an increasingly eclectic array of materials and gemstones.$(br2)Such work is clearly beneath me. Now, with the $(l:greatwork/hierophantics)$(item)Imbuement Bed$(), I finally have a solution!",
	"hierophantics.page.villager_enhancement.1": "Mine is not the only mind that can be augmented. Rather than exchanging meaningless trinkets for hours on end, I can directly increase the capability of a villager mind by simply weaving in an extra one.$(br2)As a side effect, any trade offers from the source villager will be transferred into the subject - but what need have I for such petty, material gains? The very mind itself is as clay in my hands!",
	"hierophantics.page.villager_enhancement.flay": "The process is nearly identical to embedding a mind into myself. The subject must lie in the $(item)Imbuement Bed$(), and a mind must be transferred into it from another villager - though the source here can be of any level.",
	"hierophantics.page.villager_enhancement.2": "When there is only one skill set involved in the merger, the resulting villager will retain those skills. However, if the two villagers are of different professions, the result is something entirely new, which I have dubbed a $(thing)Quiltmind$().$(br2)The more I study this, the more I find my earlier dismissal too hasty - perhaps there $(o)is$() some merit to this process beyond simply developing the mind for later extraction.",
	"hierophantics.page.villager_enhancement.3": "Like any other villager, $(thing)Quiltminds$() require a workstation to refresh their stock of goods. However, their unique mental state means that any normal workstation, even the one the villager originally used, will not suffice.$(br2)They require something capable of shifting at a moment's notice to reflect a new state of mind and an entirely new skill set. Luckily, my recent $(l:greatwork/quenching_allays)experiments with allays$() have provided the perfect material.",
	"hierophantics.page.villager_enhancement.craft": "I've noticed that $(item)quenched allays$() tend to morph in response to stray thoughts. This is mostly a nuisance, but here it is critical - the surface of the workstation can adapt itself to whatever the $(thing)Quiltmind$() currently needs.",

	"hierophantics.page.mind_handling.title.0": "Hierophantic Patterns",
	"hierophantics.page.mind_handling.0": "Once I $(l:greatwork/hierophantics)embed a mind$() into myself, I will need to instruct it as to its purpose. This is accomplished using mind reference iotas, which work much like entity iotas but for embedded minds. As such, I can freely create and destroy these iotas without affecting the existence of the minds themselves.",
	"hierophantics.page.mind_handling.title.1": "A Note on Privacy",
	"hierophantics.page.mind_handling.1": "Since mind references can be written to a storage medium, it's possible that another player may gain access to iotas refencing my own minds. Such an individual will not be able to modify my minds (the results will be similar to attempting to save my True Name) but they $(o)will$() be able to view the trigger and _Hex associated with each mind.",
	"hierophantics.page.get_minds.summary": "Pushes a list of iotas representing all my embedded minds.",
	"hierophantics.page.reenable_minds.summary": "When I die, my embedded minds become unstable and cease to function. This spell restores them to working order. Costs one $(l:items/amethyst)$(item)Amethyst Dust$() per mind restored.",
	"hierophantics.page.get_mind_hex.summary": "Pushes the _Hex stored in the provided mind, or $(l:casting/influences)$(thing)Null$() if there isn't one.",
	"hierophantics.page.set_mind_hex.summary": "Stores the provided _Hex into the mind. If there is already a stored _Hex, it will be overwritten. Costs one $(l:items/amethyst)$(item)Charged Amethyst$().",
	"hierophantics.page.get_mind_trigger.summary": "Pushes the trigger stored in the provided mind, or $(l:casting/influences)$(thing)Null$() if there isn't one.",
	"hierophantics.page.set_mind_trigger.summary": "Stores the provided trigger into the mind. If the mind already has a trigger, it will be overwritten. Costs one $(l:items/amethyst)$(item)Amethyst Shard$().",
	"hierophantics.page.free_mind.summary": "Permanently removes an embedded mind from my own consciousness.$(br2)I wonder what happens to them, when they go?",

	"hierophantics.page.triggers.title": "Hierophantic Triggers",
	"hierophantics.page.triggers.0": "My $(l:greatwork/hierophantics)embedded minds$() are independent to a point, but they cannot truly think for themselves. Thus, in order to begin casting, they require a trigger of some kind. The patterns listed here are used to create these triggers, based on a variety of common occurances. Once created, a trigger can be assigned to a mind using $(l:patterns/mind_handling#hierophantics:set_mind_trigger)Trigger Gambit$().",
	"hierophantics.page.triggers.1": "Some triggers, when activated, may cast their hex with an iota relevant to the triggering event already on the stack, to allow for a more fine-grained response. The triggers that do this are listed below, along with the iota they provide:$(br)$(li)Damage: amount of damage$()$(li)DmgType: amount of damage$()$(li)Drop: dropped item entity$()$(li)Attack: attacked entity$()$(li)Break: position broken$()$(li)Teleport: offset vector$()",
	"hierophantics.page.make_damage_trigger.summary": "Creates a trigger that activates whenever I take damage. To prevent a lethal chain-reaction, does not activate if the damage was caused by overcasting.",
	"hierophantics.page.make_damage_type_trigger.summary": "Creates a trigger that activates whenever I take damage, but only if the damage was of a specific type. The trigger will be attunned to whatever type of damage I last received.",
	"hierophantics.page.make_health_trigger.summary": "Creates a trigger that activates when my health drops below the specified value. A full, standard healthbar has a value of 20.",
	"hierophantics.page.make_breath_trigger.summary": "Creates a trigger that activates when my breath drops below the specified value. A full bar of bubbles has a value of 10.",
	"hierophantics.page.make_hunger_trigger.summary": "Creates a trigger that activates when my hunger drops below the specified value. A full hunger bar has a value of 20.",
	"hierophantics.page.make_velocity_trigger.summary": "Creates a trigger that activates when my velocity (measured in blocks per tick) exceeds the specified value.",
	"hierophantics.page.make_fall_trigger.summary": "Creates a trigger that activates when I fall further than the specified number of blocks.",
	"hierophantics.page.make_drop_trigger.summary": "Creates a trigger that activates whenever I drop an item. This does $(l)not$() include involuntary dropping, such as on death or when using $(l:patterns/great_spells/teleport)Greater Teleport$().",
	"hierophantics.page.make_attack_trigger.summary": "Creates a trigger that activates whenever I strike another entity.",
	"hierophantics.page.make_break_trigger.summary": "Creates a trigger that activates whenever I break a block.",
	"hierophantics.page.make_jump_trigger.summary": "Creates a trigger that activates whenever I jump.",
	"hierophantics.page.make_teleport_trigger.summary": "Creates a trigger that activates whenever I teleport. For reasons I cannot discern, this will not detect teleports shorter than 1.5 blocks in length."
}
