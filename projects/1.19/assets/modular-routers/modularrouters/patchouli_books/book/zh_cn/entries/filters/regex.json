{
  "name": "正则过滤器",
  "category": "filters",
  "icon": "modularrouters:regex_filter",
  "pages": [
    {
      "type": "text",
      "text": "该过滤器可以用正则表达式匹配物品和方块，和物品的$(strong)注册名/$进行比对。正则表达式非常强大，但需要花一些时间进行学习才能解锁其全部潜力。不过，基础的正则表达式运用并不是很困难。有许多网站都有关于正则表达式的教程信息，例如$(l:https://regexone.com/)RegexOne/$。"
    },
    {
      "type": "text",
      "title": "注册名",
      "text": "因为物品过滤是完全在服务器中进行的，因此无法确保物品的显示文本是什么。因此，所有过滤都会按照物品的内部$(thing)注册名/$进行比对。你可以通过按$(thing)F3+H/$开启高级提示框来查看其注册名。$(p)请注意，匹配只会比对冒号$(italic)后/$的部分。"
    },
    {
      "type": "text",
      "text": "$(thing)$(thing)右击/$过滤器，或对安装在模块中的过滤器按$(thing)鼠标中键/$ / $(bold)$(4)[$(k:modularrouters.configure)]/$来打开模块GUI。$(li)在顶部的文本框中输入正则表达式，然后按$(thing)回车键/$或点击绿色的$(bold)$(2)“+”/$按钮。假设语法正确，你的正则表达式将会添加到列表中。一个过滤器中最多有 6 个条目。$(li)点击任意正则表达式旁的红色$(bold)$(4)“X”/$将其从列表中移除。$(li)匹配不区分大小写。"
    },
    {
      "type": "text",
      "title": "示例 1",
      "text": "正则表达式'ore'会匹配所有注册名中含有'ore'的物品（\"iron_ore\"、\"gold_ore\"、\"redstone_ore\"）。不幸的是，它也会匹配\"drill_core\"，你可以通过使用正则表达式$(1)_ore/$来避免这种情况。想要更精确，你可以使用$(1)_ore$/$，这可以确保字符串\"_ore\"在物品注册名的结尾。"
    },
    {
      "type": "text",
      "title": "示例 2",
      "text": "配置一个$(l:modules/player)玩家模块/$让它从玩家的主物品栏中提取物品，并在模块中放一个含有$(1)_ore/$的正则过滤器。这可以用于提取任何来自你物品栏中的矿石，无论你身在何地，并将它们放到矿石处理系统中；如果你在离你基底很远的地方采矿，并且你想要让采掘的矿物立即送回家，这会很方便。"
    },
    {
      "type": "crafting",
      "recipe": "modularrouters:regex_filter"
    }
  ]
}
