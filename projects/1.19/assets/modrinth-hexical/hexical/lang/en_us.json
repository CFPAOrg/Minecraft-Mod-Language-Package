{
	"advancements.hexical.arch_lamp.title": "Daemon",
	"advancements.hexical.arch_lamp.description": "Acquire an archgenie lamp.",

	"advancements.hexical.reload_lamp.title": "Phenomenal Cosmic Powers!",
	"advancements.hexical.reload_lamp.description": "Reload the lamp.",
	"advancements.hexical.educate_genie.title": "New Order",
	"advancements.hexical.educate_genie.description": "Educate the genie with new instructions.",
	"advancements.hexical.lamp.title": "Diamond in the Rough",
	"advancements.hexical.lamp.description": "Acquire a genie lamp.",
	"advancements.hexical.augmented_reality.title": "Augmented Reality",
	"advancements.hexical.augmented_reality.description": "Conjure a speck.",
	"advancements.hexical.diy_conjuring.title": "DIY Conjuring!",
	"advancements.hexical.diy_conjuring.description": "Add a custom modifier to a mage block.",
	"advancements.hexical.conjure_hexxy.title": "Conjure Hexxy",
	"advancements.hexical.conjure_hexxy.description": "Give Hexxy a physical form in your world.",
	"advancements.hexical.hallucinate.title": "Only In My Head",
	"advancements.hexical.hallucinate.description": "Play a sound only you can hear!",
	"advancements.hexical.media_slurp.title": "Tripping",
	"advancements.hexical.media_slurp.description": "\"You sense that something is off.\"",

	"block.hexical.hex_candle": "Hex Candle",
	"block.hexical.mage_block": "Mage Block",
	"block.hexical.media_jar": "Media Jar",
	"death.attack.magic_missile": "%1$s was magically pierced by %2$s",
	"death.attack.magic_missile.item": "%1$s was magically pierced by %2$s using %3$s",
	"death.attack.spike": "%1$s was skewered by %2$s",
	"death.attack.spike.item": "%1$s was skewered by %2$s using %3$s",
	"entity.hexical.living_scroll": "Living Scroll",
	"entity.hexical.magic_missile": "Magic Missile",
	"entity.hexical.mesh": "Mesh",
	"entity.hexical.speck": "Speck",
	"entity.hexical.spike": "Amethyst Spike",
	"key.categories.hexical": "Hexical",
	"key.hexical.evoke": "Evoke",
	"key.hexical.telepathy": "Telepathy",
	"item.hexical.arch_lamp": "Archgenie Lamp",
	"item.hexical.conjured_compass": "Conjured Compass",
	"item.hexical.conjured_staff": "Conjured Staff",
	"item.hexical.grimoire": "Grimoire",
	"item.hexical.hexburst": "Hexburst",
	"item.hexical.hextito": "Hextito",
	"item.hexical.lamp": "Hand Genie Lamp",
	"item.hexical.gauntlet_staff": "Gauntlet Staff",
	"item.hexical.lightning_rod_staff": "Lightning Rod Staff",
	"item.hexical.living_scroll_small": "Small Living Scroll",
	"item.hexical.living_scroll_medium": "Medium Living Scroll",
	"item.hexical.living_scroll_large": "Large Living Scroll",
	"itemGroup.hexical.general": "Hexical",
	"subtitles.hexical.evoking_murmur": "Player chants",
	"subtitles.hexical.evoking_casts": "Player casts",
	"subtitles.hexical.lamp_activate": "Lamp activates",
	"subtitles.hexical.lamp_deactivate": "Lamp deactivates",
	"subtitles.hexical.sudden_realization": "Idea pops",
	"subtitles.hexical.player_slurp": "Player slurps",
	"subtitles.hexical.candle_flares": "Candle crackles",
	"subtitles.hexical.replenish_air": "Air appears",
	"tooltip.hexical.scroll_aged": "Aged",
	"tooltip.hexical.scroll_glow": "Glowing",
	"tooltip.hexical.scroll_vanished": "Vanished",
	"particle.minecraft.soul_7": "",
	"misc.hexical.media_vision": "",

	"hexical.autograph.header": "Autographed by:",

	"hexical.fortune.0": "It is certain.",
	"hexical.fortune.1": "It is decidedly so.",
	"hexical.fortune.2": "Without a doubt.",
	"hexical.fortune.3": "Yes definitely.",
	"hexical.fortune.4": "You may rely on it.",
	"hexical.fortune.5": "As I see it, yes.",
	"hexical.fortune.6": "Most likely.",
	"hexical.fortune.7": "Outlook good.",
	"hexical.fortune.8": "Yes.",
	"hexical.fortune.9": "Signs point to yes.",
	"hexical.fortune.10": "Reply hazy, try again.",
	"hexical.fortune.11": "Ask again later.",
	"hexical.fortune.12": "Better not tell you now.",
	"hexical.fortune.13": "Cannot predict.",
	"hexical.fortune.14": "Concentrate and ask again.",
	"hexical.fortune.15": "Don't count on it.",
	"hexical.fortune.16": "My reply is no.",
	"hexical.fortune.17": "My sources say no.",
	"hexical.fortune.18": "Outlook not so good.",
	"hexical.fortune.19": "Very doubtful.",

	"hexcasting.mishap.bad_block.akashic_bookshelf": "an akashic bookshelf",
	"hexcasting.mishap.bad_block.mage_block": "a mage block",
	"hexcasting.mishap.bad_block.prestidigitation": "a prestidigitation-sensitive block",
	"hexcasting.mishap.bad_item.grimoire": "a grimoire",
	"hexcasting.mishap.bad_item.firework_star": "a firework star",
	"hexcasting.mishap.bad_item.has_brain": "a villager capable of thought",
	"hexcasting.mishap.bad_item.smart_villager": "a Journeyman or greater level villager",
	"hexcasting.mishap.bad_item.lamp_full": "a lamp with media",
	"hexcasting.mishap.bad_item.lamp": "a lamp",
	"hexcasting.mishap.bad_item.living_scroll": "a living scroll",
	"hexcasting.mishap.bad_item.prestidigitation": "a prestidigitation-sensitive entity",
	"hexcasting.mishap.bad_item.mesh": "a mesh",
	"hexcasting.mishap.bad_item.speck": "a speck",
	"hexcasting.mishap.bad_item.specklike": "a specklike entity",
	"hexcasting.mishap.invalid_value.axis_vector": "an axis vector",
	"hexcasting.mishap.invalid_value.solid_block": "a non-air block",
	"hexcasting.mishap.invalid_value.entity_or_vector": "an entity or a vector",
	"hexcasting.mishap.invalid_value.pattern_list": "a list with only patterns",
	"hexcasting.mishap.invalid_value.mesh_design": "a list of up to 32 vectors with magnitudes less than 10",
	"hexcasting.mishap.invalid_value.class.dye": "a dye",
	"hexcasting.mishap.invalid_value.class.identifier": "an identifier",
	"hexcasting.mishap.invalid_value.class.pigment": "a pigment",
	"hexcasting.mishap.invalid_value.true_dye": "a colored dye",
	"hexcasting.mishap.invalid_value.to_pigment": "a colored dye, identifier of a pigment item, an item entity containing a pigment, or a player",
	"hexcasting.mishap.invalid_value.enchantment_id": "an identifier of an enchantment type",
	"hexcasting.mishap.invalid_value.block_id": "an identifier of a block type",
	"hexcasting.mishap.invalid_value.item_id": "an identifier of an item type",
	"hexcasting.mishap.invalid_value.food_id": "an identifier of a food item type",
	"hexcasting.mishap.invalid_value.status_effect_id": "an identifier of a status effect type",
	"hexcasting.mishap.invalid_value.potion_holding": "a food, potion, or tipped arrow item entity",
	"hexcasting.mishap.invalid_value.identifiable": "an identifiable target",
	"hexcasting.mishap.invalid_value.integer_natural": "an integer greater than 0",
	"hexcasting.mishap.invalid_value.recognizable": "a target with extra information",
	"hexcasting.mishap.invalid_value.lenient_living": "a living entity or an armor stand",
	"hexcasting.mishap.invalid_value.nonempty_list": "a non-empty list",
	"hexcasting.mishap.invalid_value.true_dye_list": "a list of colored dyes",
	"hexcasting.mishap.hexical:active_arch_lamp": "Expected an active Arch Lamp in the inventory.",
	"hexcasting.mishap.hexical:can_not_dye": "Expected a dyeable target",
	"hexcasting.mishap.hexical:inedible": "Wristpocketed item is not edible.",
	"hexcasting.mishap.hexical:needs_chorus_fruit": "Needs chorus fruit within inventory.",
	"hexcasting.mishap.hexical:needs_conjured_staff": "Expected to be cast by a Conjured Staff.",
	"hexcasting.mishap.hexical:needs_lamp": "Expected to be cast by a Genie Lamp.",
	"hexcasting.mishap.hexical:needs_hand_lamp": "Expected to be cast by a Hand Genie Lamp.",
	"hexcasting.mishap.hexical:needs_arch_lamp": "Expected to be cast by a Archgenie Lamp.",
	"hexcasting.mishap.hexical:needs_skippable": "Expected to be run inside of Sisyphus' Gambit or Thoth's Gambit.",
	"hexcasting.mishap.hexical:needs_thoth": "Expected to be run inside of Thoth's Gambit.",
	"hexcasting.mishap.hexical:outside_circle": "Spell exceeds the domain of the spell circle.",
	"hexcasting.mishap.hexical:themis": "Expected a number at the top of the pseudo-stack.",

	"hexcasting.spell.book.hexical:theodolite": "Theodolite Purif.",
	"hexcasting.spell.book.hexical:damage_stack": "Deterioration Purif.",
	"hexcasting.spell.book.hexical:get_arch_lamp_position": "Arch. Refl.: Spatial",
	"hexcasting.spell.book.hexical:get_arch_lamp_rotation": "Arch. Refl.: Rotational",
	"hexcasting.spell.book.hexical:get_arch_lamp_velocity": "Arch. Refl.: Kinetic",
	"hexcasting.spell.book.hexical:get_arch_lamp_use_time": "Arch. Refl.: Temporal",
	"hexcasting.spell.book.hexical:get_arch_lamp_media": "Arch. Refl.: Media",
	"hexcasting.spell.book.hexical:get_arch_lamp_storage": "Arch. Refl.: Memory",
	"hexcasting.spell.book.hexical:get_effect_amplifier": "Concentration Dstl.",
	"hexcasting.spell.book.hexical:get_effects_item": "Prescription Purif.",
	"hexcasting.spell.book.hexical:get_enchantments": "Thaumaturgist's Purif.",
	"hexcasting.spell.book.hexical:breedable": "Reproduction Purif.",
	"hexcasting.spell.book.hexical:get_hand_lamp_position": "Genie Refl.: Spatial",
	"hexcasting.spell.book.hexical:get_hand_lamp_rotation": "Genie Refl.: Rotational",
	"hexcasting.spell.book.hexical:get_hand_lamp_velocity": "Genie Refl.: Kinetic",
	"hexcasting.spell.book.hexical:get_hand_lamp_use_time": "Genie Refl.: Temporal",
	"hexcasting.spell.book.hexical:get_hand_lamp_media": "Genie Refl.: Media",
	"hexcasting.spell.book.hexical:get_hand_lamp_storage": "Genie Refl.: Memory",
	"hexcasting.spell.book.hexical:get_biome": "Geographical Purif.",
	"hexcasting.spell.book.hexical:get_weather": "Meterologist's Refl.",
	"hexcasting.spell.book.hexical:recognize": "Recognizer's Purif.",
	"hexcasting.spell.book.hexical:shuffle_pattern": "Glyphmaker's Dstl.",
	"hexcasting.spell.book.hexical:zone_specklike": "Zone Dstl.: Specklike",
	"hexcasting.spell.book.hexical:modify_block_bouncy": "Bouncy",
	"hexcasting.spell.book.hexical:modify_block_energized": "Energized",
	"hexcasting.spell.book.hexical:modify_block_ephemeral": "Ephemeral",
	"hexcasting.spell.book.hexical:modify_block_invisible": "Invisible",
	"hexcasting.spell.book.hexical:modify_block_replaceable": "Replaceable",
	"hexcasting.spell.book.hexical:modify_block_semipermeable": "Semi-Permeable",
	"hexcasting.spell.book.hexical:modify_block_volatile": "Volatile",
	"hexcasting.spell.book.hexical:read_shelf": "Librarian's Purif. II",

	"hexical.page.hexical_changes.title": "Hexical Changes",
	"hexical.page.hexical_changes.0": "I feel strangely more in tune with the ambient _media around me. It feels $(o)friendlier$() somehow... I can even feel it rippling around me, responding to my actions, as if suggesting new spells to me. The _media itself also feels more malleable, more $(o)workable$(), allowing me to manipulate it into precise specialized effects.",
	"hexical.page.hexical_changes.1": "I also find my tools more familiar. I notice I require less concentration with my $(l:items/staff)$(item)staff$() and can move around while using it, handy for chasing down targets that get out of my line of sight before I can finish my raycast. I shouldn't become too relaxed though, Nature has not become more forgiving of my mistakes. I can also write directly into my $(l:items/abacus)$(item)abacus$() with $(l:patterns/readwrite#hexcasting:write)Scribe's Gambit$().",
	"hexical.page.lightning_rod_staff.0": "By fixing a block of amethyst to some lightning rods, I can make quite the impressive $(l:items/staff)$(item)staff$(). It is quite weighty to wield but feels absolutely $(o)electrifying$() to use.",
	"hexical.page.lightning_rod_staff.1": "$(o)I learned there are troubles$(br)Of more than one kind.$(br)Some come from ahead$(br)And some come from behind.$(br2)But I've bought a big bat.$(br)I'm all ready, you see.$(br)Now my troubles are going$(br)To have troubles with $(l)me!$()",
	"hexical.page.gauntlet_staff.0": "Staffs are quite heavy to wield and finnicky to hold. In case I tire of them, I can construct a gauntlet-like \"$(l:items/staff)$(item)staff$()\" to grasp and warp the media to my will with my own fingers.",
	"hexical.page.gauntlet_staff.1": "$(o)Wait, what are fingers??$()",

	"hexical.page.grimoire.title": "Grimoires",
	"hexical.page.grimoire.0": "By encrusting an $(item)enchanted book$() with charged amethyst and $(l:items/edified)$(item)edified wood$()$(), it traps _media within the pages like an echo chamber. I can then introduce a pattern-to-pattern-list binding for the $(item)grimoire$() to keep bouncing endlessly inside.",
	"hexical.page.grimoire.1": "When I then cast the $(l:patterns/patterns_as_iotas)pattern$() associated with a pattern list with my $(l:items/staff)$(item)staff$() and the $(item)grimoire$() in my inventory, the pattern $(o)expands$() with a faint sound of a _Hex being cast. I create shortcuts for tedious tasks with this, like the raycast mantra or large patterns. The $(item)grimoire$() can even hijack Nature's patterns, to overwrite or add extra functionality.$(br2)$(o)If there's a book that you want to read, but it hasn't been written yet, then you must write it.$()",
	"hexcasting.spell.hexical:write_grimoire": "Write Grimoire",
	"hexical.page.write_grimoire.summary": "Writes a pattern-to-pattern-list binding into the $(item)grimoire$() in my offhand.",
	"hexcasting.spell.hexical:erase_grimoire": "Erase Grimoire",
	"hexical.page.erase_grimoire.summary": "Erases the pattern-list binding to the pattern in the $(item)grimoire$() in my offhand if it exists.",
	"hexcasting.spell.hexical:index_grimoire": "Archivist Reflection",
	"hexical.page.index_grimoire.summary": "Gets a list of all patterns stored in the $(item)grimoire$().",

	"hexical.page.hex_candle.title": "Hex Candles",
	"hexical.page.hex_candle.0": "When ignited for the first time, either $(l:hexical:patterns/spells/prestidigitation)magically$() or with a $(item)flint and steel$(), these delightful little candles have pale white flames. When someone interacts with it though, it happily copies their pigment. I can also right-click it with a pigment item to change its color directly. To extinguish, sneak right-click.",

	"hexical.page.living_scroll.title": "Living Scrolls",
	"hexical.page.living_scroll.0": "Living scrolls are mixed with a pinch of amethyst, enchanting the ink to move and wiggle like the patterns I draw with my $(l:items/staff)$(item)staff$(). Not only that, living scrolls can display lists of patterns.$(br2)$(o)You can't be a proper writer without a touch of madness, can you?$()",
	"hexical.page.living_scroll.1": "I can freely write and rewrite the scroll's patterns at any time, along with reading it back out. The scroll accepts only a list of pattern iotas, or a pattern iota which is automatically wrapped in a list. When displaying a list of patterns, a living scroll shows one pattern at a time. It changes once per second. Even when I write the same pattern list to two of them at two different moments of their cycle, they end up in sync.",
	"hexical.page.living_scroll.2": "What follows are some spells I've found for manipulation of living scrolls. The changes caused by these most enchantments can be reverted by casting the spell on the scroll again. They are all free.",
	"hexcasting.spell.hexical:age_scroll": "Age Scroll",
	"hexical.page.age_scroll.summary": "Yellows the parchment of the scroll, making it bear striking semblance to some ancient scrolls I've been finding.",
	"hexcasting.spell.hexical:glow_scroll": "Illuminate Ink",
	"hexical.page.glow_scroll.summary": "Causes the ink of a living scroll to brightly glow in the dark.",
	"hexcasting.spell.hexical:color_scroll": "Dye Ink",
	"hexical.page.color_scroll.summary": "Changes the color of a living scroll's ink to the color specified by the vector, with the components being 0 to 1 values of red, green, and blue respectively.",
	"hexcasting.spell.hexical:vanish_scroll": "Vanish Scroll",
	"hexical.page.vanish_scroll.summary": "Causes the scroll paper to become invisible, leaving only the pattern, making it appear as though the pattern were magically etched into the surface.",

	"hexical.page.media_jar.title": "Media Jar",
	"hexical.page.media_jar.0": "I can craft this little decorative jar of liquid _media that glows quite brightly. Unfortunately, it seems the glass is too thick for me to draw _media through it, although I have read tales that ancient _Hexcasters were able to solve this issue and being able to bottle up liquid _media and use it for their _Hexes.",
	"hexical.page.media_jar.1": "A similar item was built by prior _Hexcasters and they seemed to use it as crystal ball by sipping the fluid. Holding the energy of thought that permeates existence, perhaps its answers hold some merit.$(br2)$(o)Signs point to yes.$()",

	"hexical.category.lamp": "Genie Lamp",
	"hexical.category.lamp.desc": "I have heard tales from the villagers about a magical artifact. Legends say it contains a spirit that grants wishes, but I suspect that is just embellishment evolved over centuries of storytelling. However, legends must arise from something and I dedicate this section to my pursuit and research of it.",

	"hexcasting.spell.hexical:lamp_finale": "Finale Reflection",
	"hexical.page.lamp_finale.hand": "The instant I let go of my lamp, it casts an additional time. I can use this pattern to recognize whether a cast is that finale, and react accordingly.",
	"hexical.page.lamp_finale.arch": "When an archgenie lamp is turned off, it casts an additional time. I can use this pattern to recognize when whether a cast is that last burst of energy.",

	"hexical.page.mysterious_lamp.title": "Mysterious Lamp",
	"hexical.page.mysterious_lamp.0": "At last I've obtained the subject of a thousand years of rumor! To think a mere wandering trader was in possession of such a strong artifact. The oil lamp emanates a vague residue of _media, vacuous in feeling... it reminds me of the $(o)hollow media structure$() of a $(l:items/focus)$(item)focus$() that allows it to store iota. There is also a presence inside with casting capabilities similar to my own.",
	"hexcasting.spell.hexical:educate_genie": "Educate Genie",
	"hexical.page.educate_genie.summary": "Teaches the presence my intentions. Because I am $(o)teaching$() an entity rather than $(o)etching$() a $(l:items/hexcasting)$(item)casting device$(), I can freely revise the _Hex and reteach the genie any time without losing the _media.",

	"hexical.page.new_possibilities.title": "New Possibilities",
	"hexical.page.new_possibilities.0": "It casts $(o)$(l)EVERY INSTANT$(). After writing a spell into it, I was treated to a splendid unceasing gush of _media. I estimate the casting speed must be around twenty times every second. The genie performs the casting with extraordinary efficiency, producing little of the sounds and particles that accompany other casting methods.",
	"hexical.page.new_possibilities.1": "I have developed some useful patterns to communicate with the genie for information, documented on the next few pages. These patterns must only be cast by the genie within the lamp, lest I succumb to the Impersonate Genie mishap, which emits red sparks and yanks my casting item from my hand.$(br2)$(o)Yeah, but your $(l)$(o)hexcasters$()$(o) were so preoccupied with whether or not they could, they didn't stop to think if they should.$()",
	"hexcasting.spell.hexical:get_hand_lamp_position": "Genie Reflection: Spatial",
	"hexical.page.get_hand_lamp_position.summary": "Pushes my original position when I began using the lamp.",
	"hexcasting.spell.hexical:get_hand_lamp_rotation": "Genie Reflection: Rotational",
	"hexical.page.get_hand_lamp_rotation.summary": "Pushes my original rotation when I began using the lamp.",
	"hexcasting.spell.hexical:get_hand_lamp_velocity": "Genie Reflection: Kinetic",
	"hexical.page.get_hand_lamp_velocity.summary": "Pushes my original velocity when I began using the lamp.",
	"hexcasting.spell.hexical:get_hand_lamp_use_time": "Genie Reflection: Temporal",
	"hexical.page.get_hand_lamp_use_time.summary": "Pushes how many times the lamp has cast. Divided by 20, it is the number of seconds since I began using the lamp.",
	"hexcasting.spell.hexical:get_hand_lamp_media": "Genie Reflection: Media",
	"hexical.page.get_hand_lamp_media.summary": "Pushes the remaining _media of the lamp, in units of dust.",
	"hexcasting.spell.hexical:with_hand_lamp": "Genie Reflection",
	"hexical.page.with_hand_lamp.summary": "Pushes whether this _Hex is being cast by a handheld genie lamp.",
	"hexcasting.spell.hexical:get_hand_lamp_storage": "Genie Reflection: Memory",
	"hexical.page.set_hand_lamp_storage.summary": "Sets an internal storage of my lamp to any iota. Strangely allows bypassing the Transgress Others mishap, perhaps because it requires my active concentration to use this lamp.",
	"hexcasting.spell.hexical:set_hand_lamp_storage": "Genie Gambit",
	"hexical.page.get_hand_lamp_storage.summary": "Retrieves an iota from my hand lamp's internal storage, returns null by default.",

	"hexical.page.offerings.title": "Offerings",
	"hexical.page.offerings.0": "Hex casting burns out the mind from the energy of thought, flooding the consciousness, inundating every neuron... it's euphoric. For $(l:items/staff)$(item)staves$(), $(l:items/hexcasting)$(item)casting devices$(), and spell circles, the rate of casting is slow enough that a mind can recuperate; I will never need to replace an impetus. With the speeds lamps operates at, though, even an optimized mind can feel strain.",
	"hexical.page.offerings.1": "The lamp traps the genie and any attempts to refuel it will free it. Thus, the only way to recharge a genie lamp is to simultaneously replace the _media $(o)and$() the genie, forcing a new mind to work in its stead. A villager will do quite nicely. That is the spell that I have devised.$(br2)$(o)My name? My name is... oh god, why can't I remember my name?$()",
	"hexcasting.spell.hexical:offer_mind": "Offer Mind",
	"hexical.page.offer_mind.summary": "Can be cast by me to $(o)borrow$() the experiences and memory of a villager and give it to the lamp in my offhand. The spell itself costs one charged amethyst, plus the _media I'm giving.",
	"hexical.page.offerings.2": "Notably, this spell will $(o)not$() kill the villager. It splinters off a section of their mind to serve as the genie and for the villager's main consciousness only results in amnesia. I have heard rumors of ancient Hexcasters $(o)growing$() villager minds like crops using this property, consuming them to recharge their lamps, and allowing them to regenerate their lost knowledge in between.",
	"hexical.page.offerings.3": "Not all villagers can be a genie. I estimate there is so little media potential in any villager lesser than Journeyman-grade that the spell would simply fail. Having most of its workings $(o)optimized$() purely for casting, I doubt an Expert villager will perform any better than a Journeyman. However, certain skills may still affect the quality of casting. My notes on that on the next page.",
	"hexical.page.offerings.4": "Ingrained memories and inherent abilities seem to be able to survive the optimization process. A master villager who has honed its craft to perfection has internalized its knowledge so deeply, that it casts differently. A wandering villager who has spent its life travelling the world may be so attuned to exploration that the way it casts reflects its experience.",

	"hexical.page.arch_lamps.title": "Archgenie Lamps",
	"hexical.page.arch_lamps.0": "Rather just losing memories, the master villager's mind exited its body and completely supplanted the original genie. Because a separate entity casts my spells, a lamp should be able to cast even without me holding it. These archgenie lamps are activated and deactivated rather than used and while active in my inventory, they cast every moment even without my input.",
	"hexical.page.arch_lamps.1": "The output of an archgenie lamp is so grand that it saturates the air around me with _media... it's incredible. Unfortunately, if two lamps are active at once within my inventory, the resonances clash and deactivate both lamps, as well as rendering every archgenie lamp in my inventory useless for a few seconds. I should only have one archgenie lamp active at once, although I can still simultaneously use a regular lamp.",
	"hexical.page.arch_lamps.2": "$(o)I am a great soft jelly thing. Smoothly rounded, with no mouth, with pulsing white holes filled by fog where my eyes used to be. Rubbery appendages that were once my arms; bulks rounding down into legless humps of soft slippery matter.$(br2)I have no mouth. And I must scream.$()",
	"hexcasting.spell.hexical:activate_arch_lamp": "Activate Archgenie",
	"hexical.page.activate_arch_lamp.summary": "Can be cast by a $(l:items/hexcasting)$(item)casting device$(), $(l:items/staff)$(item)staff$(), or within an arch lamp. Deactivates any archgenie lamp and activates a previously inactive one.",
	"hexcasting.spell.hexical:terminate_arch_lamp": "Terminate Archgenie",
	"hexical.page.terminate_arch_lamp.summary": "Can be cast by a $(l:items/hexcasting)$(item)casting device$(), $(l:items/staff)$(item)staff$(), or within the arch lamp itself. Deactivates the currently active archgenie lamp.",
	"hexcasting.spell.hexical:has_arch_lamp": "Archgenie Purification",
	"hexical.page.has_arch_lamp.summary": "Pushes whether a player currently has an active arch lamp.",
	"hexcasting.spell.hexical:get_arch_lamp_position": "Archgenie Reflection: Spatial",
	"hexical.page.get_arch_lamp_position.summary": "Pushes the original position of the caster when the arch lamp started casting.",
	"hexcasting.spell.hexical:get_arch_lamp_rotation": "Archgenie Reflection: Rotational",
	"hexical.page.get_arch_lamp_rotation.summary": "Pushes the original rotation of the caster when the arch lamp started casting.",
	"hexcasting.spell.hexical:get_arch_lamp_velocity": "Archgenie Reflection: Kinetic",
	"hexical.page.get_arch_lamp_velocity.summary": "Pushes the original velocity of the caster when the arch lamp started casting.",
	"hexcasting.spell.hexical:get_arch_lamp_use_time": "Archgenie Reflection: Temporal",
	"hexical.page.get_arch_lamp_use_time.summary": "Pushes how many times the lamp has cast. Divided by 20, it returns how many times in seconds the lamp has been in use.",
	"hexcasting.spell.hexical:get_arch_lamp_media": "Archgenie Reflection: Media",
	"hexical.page.get_arch_lamp_media.summary": "Pushes the remaining amount of _media left in the lamp, in units of dust.",
	"hexcasting.spell.hexical:with_arch_lamp": "Archgenie Reflection",
	"hexical.page.with_arch_lamp.summary": "Pushes whether this _Hex is currently being cast by an arch lamp.",
	"hexcasting.spell.hexical:get_arch_lamp_storage": "Archgenie Reflection: Memory",
	"hexical.page.get_arch_lamp_storage.summary": "Can be cast by a $(l:items/hexcasting)$(item)casting device$(), $(l:items/staff)$(item)staff$(), or within an arch lamp. Gets the lamp's iota storage.",
	"hexcasting.spell.hexical:set_arch_lamp_storage": "Archgenie Gambit",
	"hexical.page.set_arch_lamp_storage.summary": "Can be cast by a $(l:items/hexcasting)$(item)casting device$(), $(l:items/staff)$(item)staff$(), or within an arch lamp. Sets the lamp's iota storage. Subject to Transgress Others mishap.",

	"hexical.page.enlightened_patterns.title": "Enlightened Patterns",
	"hexical.page.enlightened_patterns.0": "After my enlightenment, I find myself acutely aware of certain patterns that seem to aid with my newfound abilities to perceive and manipulate _media. These patterns don't seem to require anything new from me, perhaps I've always been able to cast them but was unaware of their existence.",
	"hexcasting.spell.hexical:am_enlightened": "Epiphany Purification",
	"hexical.page.am_enlightened.summary": "Pushes whether the given player has achieved enlightenment like I have.",
	"hexcasting.spell.hexical:is_brainswept": "Sentience Purification",
	"hexical.page.is_brainswept.summary": "Pushes whether an entity \"has been magically relieved of its mind\". I feel this is strongly related to $(l:patterns/great_spells/brainsweep)$(action)Flay Mind$() somehow...",

	"hexical.page.simple_patterns.title": "Hexical Patterns",
	"hexcasting.spell.hexical:entity_width": "Caliper's Purification",
	"hexical.page.entity_width.summary": "Similar to $(l:patterns/basics#hexcasting:get_entity_height)$(action)Stadiometer's Purification$() but pushes the width of an entity rather than its height.",
	"hexcasting.spell.hexical:theodolite": "Theodolite's Purification",
	"hexical.page.theodolite.summary": "Similar to $(l:patterns/basics#hexcasting:get_entity_look)$(action)Alidade's Purification$() but pushes the vector that points upwards from their head rather than the entity's facing vector.",
	"hexcasting.spell.hexical:swap_one_three": "Reflecting Gambit",
	"hexical.page.swap_one_three.summary": "Reflects the order of the top three iota, turning A, B, C into C, B, A. Essentially swaps the top and the third-from-the-top iota.",
	"hexcasting.spell.hexical:swap_two_three": "Bubbling Gambit",
	"hexical.page.swap_two_three.summary": "Causes the third-from-the-top iota to bubble up over the second-from-the-top iota, essentially swapping them.",
	"hexcasting.spell.hexical:similar": "Similarity Distillation",
	"hexical.page.similar.summary": "Pushes whether two iota are of the same type.",
	"hexcasting.spell.hexical:congruent": "Congruence Distillation",
	"hexical.page.congruent.summary": "Pushes whether two patterns have the same shape and orientation.",
	"hexcasting.spell.hexical:dup_many": "Dioscuri Gambit II",
	"hexical.page.dup_many.summary": "Takes a number and duplicates that many elements of the stack while preserving order.",
	"hexcasting.spell.hexical:shuffle_pattern": "Glyphmaker's Distillation",
	"hexical.page.shuffle_pattern.summary": "Takes in a pattern and a number and produces a pattern of the same shape, but different stroke order. My notes reveal that ancient hexcasters used this for some $(o)grand library$().",

	"hexical.page.perlin.title": "Quasirandomness",
	"hexical.page.perlin.0": "In certain regions of the world, ambient _media is more concentrated. I can measure that concentration and even extrapolate backwards and forwards in time to get a quasi-random number between 0 and 1, corresponding to that location at that time. Points in time and space that are close to each other often have similar values.",
	"hexcasting.spell.hexical:perlin": "Perlin Distillation",
	"hexical.page.perlin.summary": "Measures the concentration of ambient at that point in space and time, normalized between 0 and 1.",

	"hexical.page.special_raycasts.title": "Special Raycasts",
	"hexcasting.spell.hexical:fluid_raycast": "Naval Distillation",
	"hexical.page.fluid_raycast.summary": "Works similar to $(l:patterns/basics#hexcasting:raycast)$(action)Archer's Distillation$() but targets only liquids, piercing through all other blocks.",
	"hexcasting.spell.hexical:fluid_surface_raycast": "Lilypad Distillation",
	"hexical.page.fluid_surface_raycast.summary": "Works similar to $(l:patterns/basics#hexcasting:raycast/axis)$(action)Architect's Distillation$() but targets only liquids, piercing through all other blocks.",
	"hexcasting.spell.hexical:piercing_raycast": "Railgun Exaltation",
	"hexical.page.piercing_raycast.summary": "Works similar to $(l:patterns/basics#hexcasting:raycast)$(action)Archer's Distillation$() but accepts an additional identifier. It will pierce all blocks until it hits the block specified by the identifier.",
	"hexcasting.spell.hexical:piercing_surface_raycast": "Laser Exaltation",
	"hexical.page.piercing_surface_raycast.summary": "Works similar to $(l:patterns/basics#hexcasting:raycast/axis)$(action)Architect's Distillation$() but accepts an additional identifier. It will pierce all blocks until it hits the block specified by the identifier.",

	"hexical.page.telepathy.title": "Telepathy",
	"hexical.page.telepathy": "_Media is the energy of thought and consequently, it can interact with thoughts as well. Unfortunately or perhaps fortunately for me, the minds of players are too resistant to be swayed by _Hexes and even the minds of villagers resist tampering. There is a notable exception though: my own mind is open to my own _media, allowing me to read and write thoughts.",
	"hexcasting.spell.hexical:get_telepathy": "Telepathic Reflection",
	"hexical.page.get_telepathy.summary": "By focusing on a particular image, I can detect that concentration via this pattern. Pushes how long I have been holding down the telepathy key, or -1 if I am not holding it.",
	"hexcasting.spell.hexical:send_telepathy": "Send Thought",
	"hexical.page.send_telepathy.summary": "Momentarily displays the iota above my hotbar. If cast repeatedly, each cast overwrites the previous message instantly.",
	"hexcasting.spell.hexical:shout_telepathy": "Shout Thought",
	"hexical.page.shout_telepathy.summary": "Displays a iota across my screen. It obstructs my vision and takes some time to fade in, so I shall only use it sparingly.",
	"hexcasting.spell.hexical:pling": "Hallucinate Pling",
	"hexical.page.pling.summary": "Causes me to hear a pling that is inaudible to other players.",
	"hexcasting.spell.hexical:click": "Hallucinate Click",
	"hexical.page.click.summary": "Causes me to hear a click that is inaudible to other players.",
	"hexcasting.spell.hexical:moving_up": "Charge Reflection",
	"hexical.page.moving_up.summary": "Pushes how long I've been intending to move forwards, or -1 if I am not pressing the forwards key.",
	"hexcasting.spell.hexical:moving_down": "Retreat Reflection",
	"hexical.page.moving_down.summary": "Pushes how long I've been intending to move backwards, or -1 if I am not pressing the backwards key.",
	"hexcasting.spell.hexical:moving_left": "Dodge Reflection",
	"hexical.page.moving_left.summary": "Pushes how long I've been intending to move leftwards, or -1. Can be easily differentiated from Evade Reflection because d comes to the left of e.",
	"hexcasting.spell.hexical:moving_right": "Evade Reflection",
	"hexical.page.moving_right.summary": "Pushes how long I've been intending to move rightwards, or -1. Can be easily differentiated from Dodge Reflection because e comes to the right of d.",
	"hexcasting.spell.hexical:jumping": "Leaping Reflection",
	"hexical.page.jumping.summary": "Pushes how long I've been intending to jump, or -1 if I am not pressing the jump key.",

	"hexical.page.soroban.title": "Soroban Patterns",
	"hexical.page.soroban.0": "These patterns manipulate an imaginary counter. I shall find them useful when my $(l:patterns/readwrite#hexcasting:local)Ravenmind$() is occupied or overkill, for example to count iterations in a $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's$() loop. Some ancient scraps recommend its use for some sort of $(o)recursive depth$().$(br2)I shall also note that they don't work properly when drawn by themselves with my staff. It seems memory is maintained only for an instant.",
	"hexcasting.spell.hexical:soroban_increment": "Soroban Reflection",
	"hexical.page.soroban_increment.summary": "Pushes the current soroban counter and then increases it.",
	"hexcasting.spell.hexical:soroban_decrement": "Soroban Reflection II",
	"hexical.page.soroban_decrement.summary": "Pushes the current soroban counter and then decreases it.",
	"hexcasting.spell.hexical:soroban_reset": "Soroban Gambit",
	"hexical.page.soroban_reset.summary": "Resets the soroban counter.",

	"hexical.page.metas.title": "Hexical Metaevals",
	"hexcasting.spell.hexical:janus": "Janus' Gambit",
	"hexical.page.janus.0": "Instantly terminates the _Hex regardless of current circumstances, breaking even through $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's$() and $(l:patterns/meta#hexcasting:eval)$(action)Hermes' Gambit$() unlike $(l:patterns/meta#hexcasting:halt)$(action)Charon's Gambit$().",
	"hexical.page.janus.1": "It's useful to end a _Hex early once it has reached some desired state, without the difficulty of using $(l:patterns/meta#hexcasting:halt)$(action)Charon's Gambit$() because $(l:hexical:patterns/metaevals#hexical:janus)$(action)Janus'$() can bypass the \"containment\" of $(l:patterns/meta#hexcasting:eval)$(action)Hermes'$() and $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's$().$(br2)$(o)It is always important to know when something has reached its end.$()",
	"hexcasting.spell.hexical:nephthys": "Nephthys' Gambit",
	"hexical.page.nephthys.0": "Pops a pattern or pattern list and dives down an amount corresponding to the tail length to cast the pattern list. Useful for surgery-like operations.",
	"hexical.page.nephthys.1": "It's extremely versatile and I can mend almost any error in my stack using $(l:patterns/stackmanip#hexcasting:mask)$(action)Bookkeeper's Gambit$(), pushing iota after a dive, and transforming surfaced iota. It was named after a goddess of mourning and rivers, lending to how it buries/dives down into the stack.$(br2)$(o)... the unknowns of time travel... is akin to descending blindly into the depths of the freezing water and reappearing as an acorn.$()",
	"hexcasting.spell.hexical:sekhmet": "Sekhmet's Gambit",
	"hexical.page.sekhmet.0": "Voids the entire stack except for the top n iota, determined by tail length. In the examples above, zero, one, and two iota are left untouched respectively. $(o)Not$() a meta-evaluation on its own.",
	"hexical.page.sekhmet.1": "This simple gambit can be accomplished via $(l:patterns/stackmanip#hexcasting:stack_len)$(action)Flock's Reflection$(), $(l:patterns/lists#hexcasting:last_n_list)$(action)Flock's Gambit$(), $(l:patterns/lists#hexcasting:slice)$(action)Selection Exaltation$(), and $(l:patterns/lists#hexcasting:splat)$(action)Flock's Disintegration$() but this serves as a handy short pattern for clearing up my stack. It also pairs extremely well with Thoth's Gambit, letting me clean up the pseudo-stack should I want to only operate on and return first few iota.$(br2)$(o)Everything is possible, but not everything is necessary.$()",
	"hexcasting.spell.hexical:atalanta": "Atalanta's Gambit",
	"hexical.page.atalanta.0": "Should only be run inside $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's$() or $(l:hexical:patterns/metaevals#hexical:sisyphus)$(action)Sisyphus' Gambit$(). Acts similarly to $(l:patterns/meta#hexcasting:halt)$(action)Charon's Gambit$() except does not end the iterator, only skips the rest of the current iteration.",
	"hexical.page.atalanta.1": "This pattern can be useful to implement \"guard clauses\" for multiconditional loops. For example, after getting a list of entities, you may want to only target entities based on some large list of conditions. Rather than a mess of deeply nested conditionals, you can simply $(o)continue$() to the next iteration if any of the conditions fail, skipping the action.$(br2)$(o)You shall not pass!$()",
	"hexcasting.spell.hexical:castor": "Castor's Gambit",
	"hexical.page.castor.0": "Should only be run within a $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's$(). Details on the next page. Beware of triggering the Delve Too Deep mishap.",
	"hexical.page.castor.1": "This pattern pops an iota and schedules a new iteration of $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's$() to come right after the current one, with the popped iota being the top of the stack. It may be helpful to imagine it as the iota being added to the front of the list that I provided for $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's$() to iterate over.$(br2)$(o)Do not go where the path may lead, go instead where there is no path... and leave a trail.$()",
	"hexcasting.spell.hexical:pollux": "Pollux's Gambit",
	"hexical.page.pollux.0": "Sibling pattern to $(l:hexical:patterns/metaevals#hexical:castor)$(action)Castor's Gambit$(), this pattern schedules the additional iteration for the end instead. Carries the same risk of encountering the Delve Too Deep mishap.",
	"hexical.page.pollux.1": "Acts almost identically to its sibling pattern, but places the iteration at the end. I have read scrolls detailing techniques using these twin patterns called $(o)$(l:https://en.wikipedia.org/wiki/Depth-first_search)depth-first search$() and $(o)$(l:https://en.wikipedia.org/wiki/Breadth-first_search)breadth-first search$().$(br2)$(o)Explore the surface before diving deep.$()",
	"hexcasting.spell.hexical:sisyphus": "Sisyphus' Gambit",
	"hexical.page.sisyphus.0": "Takes a pattern list and casts it over and over forever until it encounters either a $(l:patterns/meta#hexcasting:halt)$(action)Charon's Gambit$() or a $(l:hexical:patterns/metaevals#hexical:janus)$(action)Janus' Gambit$().",
	"hexical.page.sisyphus.1": "While I have heard of self-producing _Hexes called $(o)quines$() used to make infinite loops, they can be slightly unwieldy to work with. This gambit simplifies that process by just repeatedly casting a list until it runs out of evaluations or encounters a $(l:patterns/meta#hexcasting:halt)$(action)Charon's Gambit$(). The $(l:patterns/readwrite#hexcasting:local)Ravenmind$() is persisted between iterations and it always casts with the base stack.$(br2)$(o)One always finds one's burden again... One must imagine Sisyphus happy.$()",
	"hexcasting.spell.hexical:themis": "Themis' Gambit",
	"hexical.page.themis.0": "Takes a list and a pattern or pattern list which is used to sort the list by casting over every iota similar to $(l:patterns/meta#hexcasting:for_each)$(action)Thoth's Gambit$().",
	"hexical.page.themis.1": "After each iteration, it demands a number at the top of the stack which will correspond to that iota. At the end of the gambit, a list is pushed with the iota sorted by that number in increasing order. The order of identically numbered iota are kept. If it encounters $(l:patterns/meta#hexcasting:halt)$(action)Charon's Gambit$(), it will create a sorted list with only the iota it has come across.$(br2)$(o)Shuffling is the only thing which Nature cannot undo.$()",

	"hexical.page.akashic_utils.title": "Akashic Utilities",
	"hexical.page.akashic_utils.0": "I have discovered some conveniences for akashic libraries! I can right-click or $(l:hexical:patterns/spells/prestidigitation)magically interact$() with a filled akashic bookshelf to copy its iota into my stack. I can also right-click with a scroll to copy the pattern of the bookshelf onto the scroll. Finally, I have discovered patterns that can read and write directly to a bookshelf within ambit for free.",
	"hexcasting.spell.hexical:key_shelf": "Librarian's Purification",
	"hexical.page.key_shelf.summary": "Reads the pattern key of an akashic bookshelf within ambit. Free to cast.",
	"hexcasting.spell.hexical:read_shelf": "Librarian's Purification II",
	"hexical.page.read_shelf.summary": "Reads the iota from an akashic bookshelf within ambit. Free to cast.",
	"hexcasting.spell.hexical:write_shelf": "Librarian's Gambit",
	"hexical.page.write_shelf.summary": "Writes an iota under a pattern to an akashic bookshelf within ambit. Free to cast.",
	"hexcasting.spell.hexical:clear_shelf": "Librarian's Gambit II",
	"hexical.page.clear_shelf.summary": "Clears an akashic bookshelf within ambit. Free to cast.",

	"hexical.page.mage_block.title": "Mage Blocks",
	"hexical.page.mage_block": "The blocks from $(l:patterns/spells/blockworks#hexcasting:conjure_block)$(action)Conjure Block$() last forever, are consequently a pain to clean up, and are not too versatile. Luckily, Nature offers an elegant and flexible alternative. These mage blocks come with a suite of $(o)modifiers$(). I could even stack multiple modifiers on one block or reapply a modifier to toggle it off.",
	"hexcasting.spell.hexical:conjure_mage_block": "Conjure Mage Block",
	"hexical.page.conjure_mage_block.summary": "Conjures a mage block at the location. Costs three dust.$(br2)$(o)I can create a city out of nothing, or I can cover it in volcanic rock.$()",
	"hexcasting.spell.hexical:modify_block_bouncy": "Modify Block: Bouncy",
	"hexical.page.modify_block_bouncy.summary": "This modifier makes the block delightfully fun to bounce on! It returns more force to me than regular slime blocks and I notice even if I sneak, the block bounces me regardless.",
	"hexcasting.spell.hexical:modify_block_energized": "Modify Block: Energized",
	"hexical.page.modify_block_energized.summary": "This modifier makes the block emit a Redstone signal, with the number corresponding to the power level of the output.",
	"hexcasting.spell.hexical:modify_block_ephemeral": "Modify Block: Ephemeral",
	"hexical.page.modify_block_ephemeral.summary": "This modifier takes in a number in addition to a position and shatters the block after many twentieths of a second. Subsequent casts can lengthen or shorten the duration.",
	"hexcasting.spell.hexical:modify_block_invisible": "Modify Block: Invisible",
	"hexical.page.modify_block_invisible.summary": "This modifier prevents the block from emitting the telltale particles that accompany my casting, even when being stood on.",
	"hexcasting.spell.hexical:modify_block_replaceable": "Modify Block: Replaceable",
	"hexical.page.modify_block_replaceable.summary": "This modifier is useful for construction! With this modifier applied, I find I can easily place another block in the place of the mage block.",
	"hexcasting.spell.hexical:modify_block_semipermeable": "Modify Block: Semi-Permeable",
	"hexical.page.modify_block_semipermeable.summary": "This modifier makes the block semi-permeable, only allowing the last caster of it to pass through while all other entities can not.",
	"hexcasting.spell.hexical:modify_block_volatile": "Modify Block: Volatile",
	"hexical.page.modify_block_volatile.summary": "This modifier makes the block break other mage blocks it's touching. Notably, if it breaks another volatile block, that block breaks and so on until every volatile block shatters.",

	"hexical.page.dyes.title": "Dyes",
	"hexical.page.dyes.0": "The dye spell and its specialized iota allows me to alter the color of blocks and entities. The dye iota represents a color, but also seems to represent the $(o)potential$() to be colored. For example, attempting to get the dye of grass returns null but getting the dye of undyed terracotta returns $(thing)uncolored$(), which I can use to \"bleach\" dyeable blocks.",
	"hexcasting.spell.hexical:get_dye": "Chromatic Purification",
	"hexical.page.get_dye.summary": "Gets the dye of a block, entity, or item identifier.",
	"hexcasting.spell.hexical:dye": "Dye",
	"hexical.page.dye.summary": "Dyes a dyeable block or entity. Costs an eighth of a dust.",
	"hexical.page.dyes.1": "The valid block targets for this spell include beds, candles, cakes with candles, carpets, concrete, concrete powder, glazed terracotta, sand into red sand and vice versa, sandstone and all blocks derived from it into its red variant and vice versa, shulker boxes, stained glass, stained glass panes, terracotta, tulips into their multiple colors, and wool blocks. As for entities, cat collars, dog collars, specklikes, shulkers, and item entities of all of the above blocks are valid.",
	"hexcasting.spell.hexical:translate_dye": "Vision Purification",
	"hexical.page.translate_dye.summary": "Translates a dye color into a vector, where each component is from 0 to 1 and represents the red, green, and blueness of the dye respectively.",

	"hexical.page.pigments.title": "Pigment Manipulation",
	"hexical.page.pigments.0": "Like how I can manipulate dyes with patterns, I can also manipulate pigments. I can even store multiple of them and have my hexes randomly choose one to give me for example.",
	"hexcasting.spell.hexical:to_pigment": "Pigment Purification",
	"hexical.page.to_pigment.summary": "Takes a colored dye iota and transforms it into a pigment, takes a player and returns their pigment, or takes an item containing a pigment and returns its pigment.",
	"hexcasting.spell.hexical:sample_pigment": "Pigment Exaltation",
	"hexical.page.sample_pigment.summary": "Samples the pigment at a certain place and time as a vector, where each component is from 0 to 1 and represents the red, green, and blueness respectively.",
	"hexcasting.spell.hexical:take_on_pigment": "Internalize Pigment II",
	"hexical.page.take_on_pigment.summary": "Takes a pigment iota and internalizes it for an eighth of a dust.",

	"hexcasting.spell.hexical:magic_missile": "Magic Missile",
	"hexical.page.magic_missile.summary": "Conjures a small silver of amethyst that always deals a full heart of damage and decent knockback. Costs one amethyst dust.",
	"hexical.page.magic_missile.0": "The projectile has a few interesting properties. It automatically disappears after roughly ten seconds or shatters upon hitting an entity or block. It pierces all forms of armor and protection. It is also unaffected by gravity and water drag.$(br2)$(o)A weak but enchanting sparkling projectile.$()",
	"hexical.page.magic_missile.1": "The conjuration location is quite esoteric: no wonder most users stick to conjuring it in front of them. The basic gist is a vector, where my head's position is the origin, my facing is the Z+ axis, the vector pointing up from my head is the Y+ axis, and the vector from my head pointing rightwards is the X+ axis. For basic purposes, the zero vector conjures it inside my head and a vector resembling (0, 0, n) conjures it n blocks in front of me.",

	"hexcasting.spell.hexical:prestidigitation": "Prestidigitation",
	"hexical.page.prestidigitation.summary": "Causes a small magical effect on the block or entity, usually not too distinct from the original nature or function of the block or entity. Costs 1/10th dust.",
	"hexical.page.prestidigitation.0": "This spell differs from all others I've seen. Rather than a single specific effect, this spell seems to combine dozens of small effects into a single spell. It targets a vast array of blocks and entities, and I am constantly finding uses for it. I have documented them on the following pages.",
	"hexcasting.spell.hexical:can_prestidigitate": "Alteration Purification",
	"hexical.page.can_prestidigitate.summary": "Pushes whether an entity or location is able to be manipulated with Prestidigitation.",
	"hexical.page.prestidigitation.1": "I've compiled all of its recorded uses from my notes: opens and close fence gates, trapdoors, and doors of all materials; flicks levers and presses buttons; holds down and releases pressure plates; extinguishes fire and soul fire; lights and extinguishes candles and campfires; rings bells; strips wood; carves pumpkins; makes a note block play its sound; triggers dispensers and droppers; dries mud into clay; turns most soil blocks into path blocks and path blocks into tilled soil...",
	"hexical.page.prestidigitation.2": "toggles Redstone lamps; drain cauldrons; modifies the state of Redstone repeaters, comparators, and daylight sensors, ignites and deprimes TNT and creepers; shear sheep; give and take arms from armor stands; makes squid squirt ink; makes pandas sneeze; removes the helmet of a snow golem; make pufferfish instantly swell up; take honeycomb from beehives and nests, and activates some kind of \"great work\" whatever that is.",

	"hexical.page.wristpocket.title": "Wristpocket",
	"hexical.page.wristpocket.0": "I can perform the standard magic trick of vanishing an item and bringing it back. The item hides in the $(o)wristpocket$(), where I can use _media to manipulate it. Wristpocketed items stay with me even after death and I can recall them once I have a $(l:items/staff)staff$() again.$(br2)$(o)Because making something disappear isn't enough; you have to bring it back.$()",
	"hexcasting.spell.hexical:wristpocket": "Wristpocket",
	"hexical.page.wristpocket.summary": "This spell vanishes the stack of items in my other hand, or conjures it back, swapping if my other hand is holding something. Costs 1/8th of a dust.",
	"hexcasting.spell.hexical:wristpocket_item": "Pocket Reflection",
	"hexical.page.wristpocket_item.summary": "Returns the identifier of the item in my wristpocket, or null if it is empty.",
	"hexcasting.spell.hexical:wristpocket_count": "Pocket Reflection II",
	"hexical.page.wristpocket_count.summary": "Returns how many items I have in my wristpocket, or 0 if it is empty.",
	"hexcasting.spell.hexical:sleight": "Sleight",
	"hexical.page.sleight.summary": "Performs an act of magical sleight of hand to steal items into my wristpocket or expel my wristpocket back into the world. Costs 1/4th of a dust.",
	"hexical.page.sleight.0": "- if taking a vector, it conjures my wristpocketed item at that vector.$(br)-if taking an item entity, if my wristpocket is empty, it is pulled into my wristpocket. If my wristpocket is not empty, the items are swapped.$(br2)$(o)If your sleight of hand causes you to break eye contact with your audience, it is too advanced for your skill level.$()",
	"hexcasting.spell.hexical:mage_hand": "Mage Hand",
	"hexical.page.mage_hand.summary": "Conjures a magical hand that uses my wristpocketed item to interact with the world. If my wristpocket is empty, acts as though I had interacted with the world.",
	"hexical.page.mage_hand.0": "- if taking an entity, interacts with the entity with the item.$(br)- if taking a vector, interacts with the block with the item.$(br2)$(o)A spectral, floating hand appears at a point you choose within range.$()",
	"hexcasting.spell.hexical:ingest": "Assimilate Food",
	"hexical.page.ingest.summary": "This spell makes me eat my wristpocketed item, nourishing or applying potions to me. Regardless of the item's time to eat or if I'm full, this spell makes me consume it instantly.",

	"hexical.page.specks.title": "Specks",
	"hexical.page.specks.0": "I can conjure an image of an iota into the world, called a $(thing)speck$(). Nature allows me to customize them quite extensively, altering their size, thickness of stroke, and more. They also take on my pigment color. Once they are in the world, I can move, rotate, and otherwise alter them for free, regardless of range.",
	"hexcasting.spell.hexical:conjure_speck": "Conjure Speck",
	"hexical.page.conjure_speck.summary": "Conjures a speck with the iota, position, and rotation. Costs one-hundredth of a dust. Pushes the speck iota to the stack.",
	"hexcasting.spell.hexical:move_specklike": "Move Speck",
	"hexical.page.move_specklike.summary": "Moves a speck entity to the position.",
	"hexcasting.spell.hexical:rotate_specklike": "Rotate Speck",
	"hexical.page.rotate_specklike.summary": "Rotates a speck entity to face the vector.",
	"hexcasting.spell.hexical:roll_specklike": "Roll Speck",
	"hexical.page.roll_specklike.summary": "Accepts a number between 0 and 1, representing a fraction of a full rotation, and rotates the speck's image by that amount.",
	"hexcasting.spell.hexical:iota_speck": "Alter Speck",
	"hexical.page.iota_speck.summary": "Changes the speck's iota.",
	"hexcasting.spell.hexical:lifetime_specklike": "Time Speck",
	"hexical.page.lifetime_specklike.summary": "Commands the speck to disappear after that many twentieths of a second.",
	"hexcasting.spell.hexical:size_specklike": "Resize Speck",
	"hexical.page.size_specklike.summary": "Scales the speck, can range from 0 to 10. Represents size in blocks and is zero by default.",
	"hexcasting.spell.hexical:thickness_specklike": "Thicken Speck",
	"hexical.page.thickness_specklike.summary": "Changes the stroke thickness of a pattern speck, can range from 0 to 10. Represents twentieths of a block, and is zero by default.",
	"hexcasting.spell.hexical:pigment_specklike": "Paint Speck",
	"hexical.page.pigment_specklike.summary": "Splashes a pigment iota onto the speck, changing its color after creation.",
	"hexcasting.spell.hexical:kill_specklike": "Dismiss Speck",
	"hexical.page.kill_specklike.summary": "Forces a speck to disappear.",
	"hexcasting.spell.hexical:zone_specklike": "Zone Distillation: Speck",
	"hexical.page.zone_specklike.summary": "Returns specks similarly to other $(l:patterns/entities#hexcasting:zone_entity/animal)zone distillation$() patterns.",

	"hexical.page.simple_spells.title": "Hexical Spells",
	"hexcasting.spell.hexical:autograph": "Autograph",
	"hexical.page.autograph.summary": "Permanently autographs the item in my offhand with my name and pigment. Costs nothing.",
	"hexical.page.autograph.description": "An autographed item holds a list of the names people who have casted this spell on it, in order and in shimmering pigmented text. It becomes unstackable with unautographed items, even of the same type, and the same person can sign it multiple times. It may be used as a secure method of ensuring an item was approved of by a person.$(br2)$(o)Success is when your signature becomes an autograph.$()",
	"hexcasting.spell.hexical:conjure_hexburst": "Conjure Hexburst",
	"hexical.page.conjure_hexburst.summary": "Conjures a hexburst at the location with the given iota. Costs one dust. Is subject to the Transgress Others mishap.",
	"hexical.page.conjure_hexburst.description": "Hexbursts are edible items created by taking an iota and wrapping _media around it, over and over until it gains size. When eaten, a hexburst instantly adds the iota it was made from to the consumer's stack. I shall find this property considerably useful if I ever want to trade my entity reference.",
	"hexcasting.spell.hexical:conjure_hextito": "Conjure Hextito",
	"hexical.page.conjure_hextito.summary": "Conjures a hextito at the location. Costs two dust. Is subject to the Transgress Others mishap.",
	"hexical.page.conjure_hextito.description": "Hextitos are triangular crunchy snacks I can conjure. When consumed, I feel the sudden desire to cast the _Hex used in its creation, using my caster's stack rather than an isolated stack like a regular $(l:items/hexcasting)$(item)casting device$(). I shall find it useful to make simple actions like raycasts, especially in conjunction with hexbursts. If a consumer's stack has an unclosed Introspection, it will not cast, making it quite safe to hand out to other people.",
	"hexcasting.spell.hexical:ghast_fireball": "Conjure Fireball",
	"hexical.page.ghast_fireball.summary": "Conjures an explosive fireball that can be punched and damages blocks. Costs three dust.",
	"hexical.page.ghast_fireball.description": "The conjured fireball simply hangs in the air. It must be propelled via punching it or $(l:patterns/spells/basic#hexcasting:add_motion)$(action)Impulse$(). It can also be deflected via similar methods.$(br2)$(o)What's the good of having mastery over cosmic balance and knowing the secrets of fate if you can't blow something up?$()",
	"hexcasting.spell.hexical:gasp": "Gasp",
	"hexical.page.gasp.summary": "Instantly replenishes a creature's air bubbles, always costs one dust.",
	"hexical.page.gasp.description": "Regardless of amount of breath restored, this spell costs exactly one dust so I should ideally wait as long as I safely can before casting this spell. I will find it useful while diving, being teleported into a block, or even keeping sea creatures alive on land.$(br2)$(o)The best way to observe a fish is to become a fish.$()",
	"hexcasting.spell.hexical:chorus_blink": "Chorus Blink",
	"hexical.page.chorus_blink.summary": "Between $(l:patterns/spells/basic#hexcasting:blink)$(action)Blink$(), $(l:patterns/great_spells/teleport)$(action)Greater Teleport$(), $(item)ender pearls$(), and $(item)chorus fruit$(), this spell serves a harmonious midpoint for safe, precise, and cheap teleportation.",
	"hexical.page.chorus_blink.description": "It consumes a $(item)chorus fruit$() from my inventory and teleports me up to 16 blocks using an offset vector. The cost is a single dust whether I teleport the full 16 blocks or less, and has no penalty for multiple casts in one hex. Ambit works strangely with repeated casts of this spell because each $(o)blink$() shifts my ambit to my new position.$(br2)$(o)I could be there in a heartbeat.$()",

	"hexical.page.conjure_compass.title": "Conjure Compasses",
	"hexcasting.spell.hexical:conjure_compass": "Conjure Compass",
	"hexical.page.conjure_compass.summary": "Conjures a compass at the location pointing towards the second vector. Costs three dust.",
	"hexical.page.conjure_compass.description": "The compass does not remember the dimension it was formed in, so regardless of dimension, it points towards the same location. If read with Scribe's Reflection, it returns a unit vector pointing towards the location inside it.$(br2)$(o)Aye, the compass doesn't point North. But we're not trying to find North, are we?$()",

	"hexical.page.spike.title": "Conjure Spike",
	"hexical.page.spike.0": "I hear rumors of a sorcerer illager that can summon fangs from the ground. While I find it hard to believe that villagers can shift _media, I have taken inspiration from those myths and created this spell that brings forth spikes from the ground to skewer targets.",
	"hexcasting.spell.hexical:spike": "Conjure Spike",
	"hexical.page.spike.summary": "Takes a non-air position, an axis vector, and a delay in seconds up to ten seconds long and conjures a spike at that location. Costs one shard.",
	"hexical.page.spike.1": "Each spike takes about a half second to strike and deal a hefty three full hearts of damage. If I attempt to cast this spell where a spike has already been primed, it will do nothing. Spikes will also throw back targets in the direction they were conjured.",

	"hexical.page.conjure_staff.title": "Conjure Staves",
	"hexical.page.conjure_staff.0": "Conjured staves are not unlike $(l:items/hexcasting)$(item)cyphers$(). They have a battery for casting and when they run out, unable to consume my health or my inventory's stash for _media. They are not rechargable or reprogrammable, and using $(l:patterns/spells/hexcasting#hexcasting:erase)$(action)Erase Item$() on it simply destroys it. However, its true power is $(o)input interception$().",
	"hexcasting.spell.hexical:conjure_staff": "Conjure Staff",
	"hexical.page.conjure_staff.summary": "Conjures a $(item)staff$() at the location with the amount of _media, rank, and _Hex respectively.$(br2)$(o)This is my $(l)staff$()$(o). There are many like it, but this one is mine.$()",
	"hexical.page.conjure_staff.1": "When I use my primary or secondary use keys while holding a $(item)conjured staff$(), it intercepts my click, preventing me from interacting with the world while holding it. After a number of clicks corresponding to the rank I assigned at conjuration, it casts the _Hex I gave it, starting the stack with false and true, corresponding to the left and right clicks respectively. If I pause for too long between clicks, it simply cancels the current \"cast\".",
	"hexical.page.conjure_staff.2": "The spell is not too expensive, requiring only an amethyst shard and the _media for the battery. The result is a speedy and versatile $(l:items/hexcasting)$(item)casting device$(), with infinitely more possibilities and no cooldown compared to other $(l:items/hexcasting)$(item)casting devices$().$(br2)Not only that, conjured staves feature an iota storage that can only be edited from the staff itself.",
	"hexcasting.spell.hexical:read_staff": "Staff Reflection",
	"hexical.page.read_staff.summary": "Reads the iota from the $(item)conjured staff's$() inner storage.",
	"hexcasting.spell.hexical:write_staff": "Staff Gambit",
	"hexical.page.write_staff.summary": "Writes an iota to the $(item)conjured staff's$() inner storage. Does not allow player references.",
	"hexcasting.spell.hexical:with_conjured_staff": "Wand Reflection",
	"hexical.page.with_conjured_staff.summary": "Pushes whether this _Hex is currently being cast by a conjured staff.",
	"hexical.page.conjure_staff.3": "By holding certain items in my offhand while conjuring a $(item)conjured staff$(), the $(item)staff$() will take on a similar appearance to that item. The items and their corresponding transformations that I have discovered so far are wheat (a four-leafed clover), nautilus shells (a conch), bells (a handbell), tripwire hooks (a key), and glass blocks (a mirror).",

	"hexical.page.pyrotechnics.title": "Pyrotechnics",
	"hexical.page.pyrotechnics.0": "I have stumbled across some spells all about conjuring fireworks. The _media hums quite festively around the patterns, as if they were once used for grand celebrations, although I shudder to imagine how effective they'd be as a weaponized projectile.$(br2)$(o)You don’t need to say anything. Just watch the fireworks.$()",
	"hexcasting.spell.hexical:simulate_firework": "Simulate Firework",
	"hexical.page.simulate_firework.summary": "Analyzes the firework star in my other hand and conjures a firework, with position, velocity, and flight time related to gunpowder amount. Costs one shard plus one dust for each additional gunpowder.",
	"hexcasting.spell.hexical:conjure_firework": "Conjure Firework",
	"hexical.page.conjure_firework.summary": "$(br)Conjures a firework of my exact specifications. It is one of the most complex spells I've discovered. Costs the same as the other firework spell.",
	"hexical.page.conjure_firework.0": "$(o)Basic Theory$()$(br2)The first two parameters of the spell are simple position and velocity. The third parameter dictates flight duration, a number from 1 to 3. I can imagine it as being the amount of gunpowder I would add to a firework rocket.$(br2)The remaining parameters can be imagined as specifications for a virtual firework star.",
	"hexical.page.conjure_firework.1": "$(o)Shape$()$(br2)The fourth parameter controls the shape of the explosion, based off a number 0 to 3.$(br)- 0 is a simple, small ball-shaped explosion.$(br)- 1 is a large ball-shaped explosion.$(br)- 2 is a star-shaped explosion.$(br)- 3 is a large creeper face-shaped explosion.",
	"hexical.page.conjure_firework.2": "$(o)Colors$()$(br2)The fifth and sixth parameters are lists of $(l:hexical:patterns/spells/dyes)dyes$(). The first list controls the colors of the firework's initial burst, while the second controls the colors that the first particles fade into. There must be at least one dye specified for the first list, but the second list can be empty if I do not want any fades.",
	"hexical.page.conjure_firework.3": "$(o)Special Effects$()$(br2)The seventh parameter controls whether the particles of the firework flicker, as if adding glowstone to the virtual firework star.$(br2)The eighth parameter controls whether the particles of the firework leave trails, as if adding a diamond to the virtual firework star.",

	"hexical.page.circle_spells.title": "Circle Spells",
	"hexical.page.circle_spells.0": "When the _media courses through the boundaries of a circle, it saturates the domain inside the circle with _media, allowing me to manipulate the environment inside far more flexibly than I am used to. The following are some spells I've come across or developed, which are to only be cast by a $(l:greatwork/spellcircles)spell circle$().",
	"hexcasting.spell.hexical:displace": "Displace",
	"hexical.page.displace.summary": "For absolutely free, I can teleport an entity in my circle to anywhere else inside within the same circle. Unlike $(l:patterns/great_spells/teleport)$(action)Greater Teleport$(), takes in world coordinates rather than an offset.",

	"hexical.page.evocation.title": "Evocation",
	"hexical.page.evocation.0": "Media is the energy of thought, so it stands to reason that I should be able to simply $(o)think$() magic into existence rather than waving around a staff. After all, I have two chunks' worth of charged amethyst in me at my prime, double that of a $(l:items/staff)$(item)staff$(). I am not yet great enough to shift arbitrary effects into reality but I can bring it forth a prepared _Hex into existence, taking _media from my inventory.",
	"hexcasting.spell.hexical:internalize_hex": "Internalize Hex",
	"hexical.page.internalize_hex.summary": "Internalizes a _Hex, allowing me to cast it by holding the R key for one second even without a staff. Costs one charged amethyst for the etching process.",
	"hexcasting.spell.hexical:is_evoking": "Evoker Reflection",
	"hexical.page.is_evoking.summary": "Pushes how long since a player has been evoking. Is -1 if they are not currently evoking.",
	"hexcasting.spell.hexical:with_evocation": "Evocation Reflection",
	"hexical.page.with_evocation.summary": "Pushes whether evocation is being used to cast this pattern.",
	"hexical.page.evocation.1": "The ancient texts I have learned this technique from reveals many other interesting trifles: _Hexcasters used to perform evocation without casting a _Hex, as some kind of greeting or group ritual, chanting in unison. Experiments have also been done to see if the spell could etch a _Hex into $(o)villagers$() to grant them the ability to shift _media but the results of those experiments were either never documented or have been lost to time.",

	"hexcasting.spell.hexical:greater_blink": "Greater Blink",
	"hexical.page.greater_blink.0": "Greater Blink is a significantly cheaper alternative to Greater Teleport. It also does not carry the risk of splattering your items upon arrival. However, it only has pitiful range compared to Greater Teleport and its destination calculations are... esoteric. I also can not specify a target other than myself.",
	"hexical.page.greater_blink.summary": "Teleports me up to 128 blocks away, relative to my position and rotation. Costs two dust.",
	"hexical.page.greater_blink.1": "A vector of (0, 0, 1) would teleport me one block in the direction I'm facing. A vector of (0, 1, 0) would teleport me one block \"up\" in the direction of the top of my head. A vector of (0, 1, 10) would teleport me ten blocks forward in the direction I'm facing and one block upwards from the top of my head.",
	"hexical.page.greater_blink.2": "Peculiarly, it moves my feet to the location, perhaps could be helpful to make a raycast simply teleport me right onto the target block rather than submerged into the floor. If I have to do multiple jumps, this property must be accounted for.$(br2)$(o)Long Jaunt! Longer than you think-$()",

	"hexical.page.meshes.title": "Meshes",
	"hexical.page.meshes.0": "Meshes are the natural evolution of $(l:hexical:patterns/spells/specks)specks$(). Rather than being restricted to the figure of iotas and patterns, stuck in a two-dimensional plane, meshes accept a list of vectors in three-dimensional space and connect them with lines, allowing for infinite creative constructions. It's also responsive to most patterns used for manipulation of specks.",
	"hexcasting.spell.hexical:conjure_mesh": "Conjure Mesh",
	"hexical.page.conjure_mesh.summary": "Conjures a mesh with the location and leaves a mesh entity on the stack. Cost one dust.",
	"hexical.page.meshes.1": "The mesh must be woven to have any appearance. The constraints for the list of vectors provided to a mesh are quite minimal. The list must be no more than 32 vectors long, and those vectors must have magnitudes less than 10. The mesh will then connect each of those points, defined by the relative offset, to each other.",
	"hexcasting.spell.hexical:weave_mesh": "Weave Mesh",
	"hexical.page.weave_mesh.summary": "Takes a list of vectors, with constraints defined on the prior page, and weaves the mesh into that shape for free.",
	"hexcasting.spell.hexical:read_mesh": "Tangle Purification",
	"hexical.page.read_mesh.summary": "Reads the shape of a mesh as a list of relative vectors. Can be used to copy meshes.",

	"hexical.category.scrying": "Scrying",
	"hexical.category.scrying.desc": "I have stumbled upon a branch of manipulating _media entirely focused around information about the world. These patterns can divine a surprising amount of information like types of blocks, status effects, the weather, the nutritional value of food, whether I am sprinting, $(o)block explosion resistance$(), and more. While likely not too useful for the majority of _Hexes, these will be convenient to have, should I ever need them.",

	"hexical.page.blocks.title": "Blocks",
	"hexcasting.spell.hexical:block_hardness": "Miner's Purification",
	"hexical.page.block_hardness.summary": "Pushes how difficult blocks of that block type are to mine.",
	"hexcasting.spell.hexical:block_blast_resistance": "Demoman's Purification",
	"hexical.page.block_blast_resistance.summary": "Pushes how resistant blocks of that block type are to explosions.",
	"hexcasting.spell.hexical:blockstate_waterlogged": "Plumber's Purification",
	"hexical.page.blockstate_waterlogged.summary": "Pushes whether the block is waterlogged, or null if the block can not be waterlogged.",
	"hexcasting.spell.hexical:blockstate_rotation": "Orientation Purification",
	"hexical.page.blockstate_rotation.summary": "Pushes the vector of the block's facing direction, or null if the block does not have a facing direction.",
	"hexcasting.spell.hexical:blockstate_crop": "Farmer's Purification",
	"hexical.page.blockstate_crop.summary": "Pushes a number 0 to 1, corresponding to how grown that crop is, as well as beehives, composters, and cauldrons. Strangely works on cakes too.",
	"hexcasting.spell.hexical:blockstate_glow": "Glowing Purification",
	"hexical.page.blockstate_glow.summary": "Pushes a boolean for whether the block is in a \"lit\" state, for example furnaces, Redstone torches, lamps, and campfires.",
	"hexcasting.spell.hexical:blockstate_lock": "Lock Purification",
	"hexical.page.blockstate_lock.summary": "Pushes a boolean for whether the block is currently in a \"open\" state, for example doors, trapdoors, fence gates, and open barrels.",
	"hexcasting.spell.hexical:blockstate_turn": "Angle Purification",
	"hexical.page.blockstate_turn.summary": "Pushes a number corresponding to the rotation of signs, skulls, and banners.",
	"hexcasting.spell.hexical:blockstate_bunch": "Bunching Purification",
	"hexical.page.blockstate_bunch.summary": "Pushes how many are in a bunch block, or null otherwise. Useful only for candles, sea pickles, and turtle eggs.",
	"hexcasting.spell.hexical:blockstate_book": "Book Purification",
	"hexical.page.blockstate_book.summary": "Pushes a boolean for whether lecterns or jukeboxes have a book/music disc in them respectively. Rumors say it works for some kind of magic bookshelf too.",

	"hexical.page.enchantments.title": "Enchantments",
	"hexcasting.spell.hexical:get_enchantments": "Thaumaturgist's Purification",
	"hexical.page.get_enchantments.summary": "Gets a list of enchantments the item has.",
	"hexcasting.spell.hexical:get_enchantment_strength": "Charm Distillation",
	"hexical.page.get_enchantment_strength.summary": "Gets the strength of the specific enchantment on the item.",

	"hexical.page.entities.title": "Entities",
	"hexcasting.spell.hexical:get_health": "Vitality Purification",
	"hexical.page.get_health.summary": "Pushes how close an entity is to death. I can think of these in terms of half-hearts.",
	"hexcasting.spell.hexical:get_max_health": "Fitness Purification",
	"hexical.page.get_max_health.summary": "Pushes how much health an entity can have at its prime. I can think of these in terms of half-hearts.",
	"hexcasting.spell.hexical:get_air": "Suffocation Purification",
	"hexical.page.get_air.summary": "Pushes how many seconds before an entity starts to suffocate. This applies to fish out of water as well as land creatures in water.",
	"hexcasting.spell.hexical:get_max_air": "Lung Purification",
	"hexical.page.get_max_air.summary": "Pushes how many seconds an entity can last outside their normal breathing environment before they start suffocating.",
	"hexcasting.spell.hexical:get_player_hunger": "Hunger Purification",
	"hexical.page.get_player_hunger.summary": "Pushes how full a player is. I can imagine this as individual hunger hunches.",
	"hexcasting.spell.hexical:get_player_saturation": "Stamina Purification",
	"hexical.page.get_player_saturation.summary": "Pushes my saturation, which roughly correlates to how long the player will remain full.",
	"hexcasting.spell.hexical:is_burning": "Inferno Purification",
	"hexical.page.is_burning.summary": "Pushes whether the entity is burning. Also applies to entities that are visually on fire, even if they are immune to fire like blazes attacking.",
	"hexcasting.spell.hexical:burning_time": "Inferno Purification II",
	"hexical.page.burning_time.summary": "Pushes how long in seconds the entity will continue burning if not put out.",
	"hexcasting.spell.hexical:is_wet": "Enderman's Purification",
	"hexical.page.is_wet.summary": "Pushes whether the entity is touching rain, water, or in a bubble column.",
	"hexcasting.spell.hexical:is_baby": "Youth Purification",
	"hexical.page.is_baby.summary": "Pushes whether a living creature is in its baby form. Also works on armor stands oddly.",
	"hexcasting.spell.hexical:breedable": "Reproduction Purification",
	"hexical.page.breedable.summary": "Pushes whether an animal creature is in love and ready to mate, or null if that creature is not capable of that type of reproduction.",
	"hexcasting.spell.hexical:is_sleeping": "Sloth's Purification",
	"hexical.page.is_sleeping.summary": "Pushes whether the entity is sleeping. Applies to players, cats, foxes, and a variety of other creatures.",
	"hexcasting.spell.hexical:is_sprinting": "Racer's Purification",
	"hexical.page.is_sprinting.summary": "Pushes whether the entity is sprinting. Includes if I am swimming or if I have left the ground since sprinting and extends to cats, foxes, and more.",

	"hexical.page.food.title": "Food",
	"hexcasting.spell.hexical:edible": "Edibility Purification",
	"hexical.page.edible.summary": "Takes in an item identifier and pushes whether you can eat it.",
	"hexcasting.spell.hexical:get_hunger": "Calorie Purification",
	"hexical.page.get_hunger.summary": "Takes in an item identifier and pushes the amount it will fill you.",
	"hexcasting.spell.hexical:get_saturation": "Satiation Purification",
	"hexical.page.get_saturation.summary": "Takes in an item identifier and pushes the saturation value, which roughly affects how long it will fill you.",
	"hexcasting.spell.hexical:is_meat": "Flesh Purification",
	"hexical.page.is_meat.summary": "Takes in an item identifier and pushes whether it's considered a meat (wolves can eat it).",
	"hexcasting.spell.hexical:is_snack": "Dessert Purification",
	"hexical.page.is_snack.summary": "Takes in an item identifier and pushes whether it's a snack (you can eat it really quickly).",

	"hexical.page.identifiers.title": "Identifiers",
	"hexical.page.identifiers.0": "My _Hexes has so far been quite blind to the world. I can get a creature's height, velocity, and more but I can't directly identify that entity. Nature's solution to the problem is the $(o)identifier iota$(). Every entity, block, status effect, enchantment, sound, etc... has a unique identifier that my _Hexes can identify. Once I have two identifiers, I can compare them with each other.",
	"hexcasting.spell.hexical:identify": "Detective's Purification",
	"hexical.page.identify.summary": "Pushes the identifier of an entity or block at a vector.",
	"hexical.page.identifiers.1": "I notice that if I were to use Detective's Purification on an item, it returns that it's an item entity, but if I were to use Recognizer's Purification on that same entity, it would return the type of item. This type of item matches with a block identifier returned by Detective's Purification. I can imagine Recognizer's as returning $(o)additional$() information if possible.",
	"hexcasting.spell.hexical:recognize": "Recognizer's Purification",
	"hexical.page.recognize.summary": "Pushes extra identifier information of an entity, mainly the item type of an item entity or the item type inside an item frame entity.",
	"hexcasting.spell.hexical:get_mainhand_stack": "Tool Purification",
	"hexical.page.get_mainhand_stack.summary": "Returns the type of item in my mainhand.",
	"hexcasting.spell.hexical:get_offhand_stack": "Accessory Purification",
	"hexical.page.get_offhand_stack.summary": "Returns the type of item in my offhand.",

	"hexical.page.item.title": "Items",
	"hexcasting.spell.hexical:count_stack": "Storage Purification",
	"hexical.page.count_stack.summary": "Takes in an item entity and pushes how many items are in it.",
	"hexcasting.spell.hexical:count_max_stack": "Warehouse Purification",
	"hexical.page.count_max_stack.summary": "Takes in an item entity and pushes how many items that can stack in it.",
	"hexcasting.spell.hexical:damage_stack": "Deterioration Purification",
	"hexical.page.damage_stack.summary": "Takes in an item entity and pushes how much damage the item has sustained.",
	"hexcasting.spell.hexical:damage_max_stack": "Fragility Purification",
	"hexical.page.damage_max_stack.summary": "Takes in an item entity and pushes how much durability the item can have at its peak.",

	"hexical.page.status_effects.title": "Status Effects",
	"hexcasting.spell.hexical:get_effects_entity": "Diagnosis Purification",
	"hexical.page.get_effects_entity.summary": "Pushes a list of status effects the entity is afflicted with.",
	"hexcasting.spell.hexical:get_effects_item": "Prescription Purification",
	"hexical.page.get_effects_item.summary": "Pushes a list of status effects the food or potion will bestow.",
	"hexcasting.spell.hexical:get_effect_category": "Condition Purification",
	"hexical.page.get_effect_category.summary": "Pushes the general \"goodness\" of the effect towards the afflicted. -1 for harmful, 0 for neutral, and 1 for beneficial.",
	"hexcasting.spell.hexical:get_effect_amplifier": "Concentration Distillation",
	"hexical.page.get_effect_amplifier.summary": "Pushes the potency of the specific effect acting on the entity or null if the entity doesn't have it.",
	"hexcasting.spell.hexical:get_effect_duration": "Clearance Distillation",
	"hexical.page.get_effect_duration.summary": "Pushes how long the effect will last in seconds or null if the entity doesn't have it.",

	"hexical.page.world.title": "World",
	"hexcasting.spell.hexical:get_light": "Luminance Purification",
	"hexical.page.get_light.summary": "Pushes the light level at the position as a number 0 to 15. If inside a nontransparent block, it returns zero.",
	"hexcasting.spell.hexical:get_weather": "Meterologist's Reflection",
	"hexical.page.get_weather.summary": "Pushes a number corresponding to the weather. 0 for clear, 1 for rain, and 2 for thundering.",
	"hexcasting.spell.hexical:get_time": "Temporal Reflection",
	"hexical.page.get_time.summary": "Pushes the age of the world in seconds.",
	"hexcasting.spell.hexical:get_biome": "Geographical Purification",
	"hexical.page.get_biome.summary": "Pushes the identifier of the biome type that the vector is within.",
	"hexcasting.spell.hexical:get_dimension": "Plane Reflection",
	"hexical.page.get_dimension.summary": "Pushes the identifier of the dimension the _Hex is being cast in."
}
