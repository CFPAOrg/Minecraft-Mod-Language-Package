{
  "hexcasting.spell.hexecuteif:eval_if": "Hermes' Deliberation",
  "hexcasting.spell.hexecuteif:halt_if": "Charon's Caution",
  "hexcasting.spell.book.hexecuteif:eval_if": "Hermes' Deliberation",
  "hexcasting.spell.book.hexecuteif:halt_if": "Charon's Caution",
  "hexecuteif.entry.meta": "HexecuteIf Meta",
  "hexecuteif.page.meta.eval_if.1": "This spell will assess the current magical environment and selectively execute further spells if and only if the preconditions set by the caster are met.",
  "hexecuteif.page.meta.eval_if.2": "This adaptation of $(l:patterns/meta#hexcasting:eval)$(action)Hermes' Gambit/$ allows the caster to perform complex spells with a conditional gateway, ensuring they are only cast when beneficial or safe.",
  "hexecuteif.page.meta.halt_if.1": "Similar to $(l:patterns/meta#hexcasting:halt)$(action)Charon's Gambit/$ this spell stops the execution of subsequent spells, but only if a specific condition is true.",
  "hexecuteif.page.meta.halt_if.2": "It acts as a safety net, ensuring that potentially dangerous or unwanted spells are halted under certain circumstances.",




  "hexcasting.spell.hexecuteif:can_break_block": "Can Break Block",
  "hexcasting.spell.hexecuteif:can_place_block": "Can Place Block",
  "hexcasting.spell.book.hexecuteif:can_break_block": "Can Break Block",
  "hexcasting.spell.book.hexecuteif:can_place_block": "Can Place Block",
  "hexecuteif.entry.blocks": "HexecuteIf Blocks",
  "hexecuteif.page.blocks.can_break_block": "Takes the position of a block and checks whether it can be broken.",
  "hexecuteif.page.blocks.can_place_block": "Accepts the position and flag for checking for liquid, and then checks whether it is possible to place a block in this place",




  "hexcasting.spell.hexecuteif:inv_slot_count": "Inventory Size",
  "hexcasting.spell.book.hexecuteif:inv_slot_count": "Inventory Size",

  "hexcasting.spell.hexecuteif:inv_occupied_slots": "Occupied Slots",
  "hexcasting.spell.book.hexecuteif:inv_occupied_slots": "Occupied Slots",

  "hexcasting.spell.hexecuteif:inv_slot_item_count": "Number of Items in Slot",
  "hexcasting.spell.book.hexecuteif:inv_slot_item_count": "Number of Items in Slot",

  "hexcasting.spell.hexecuteif:inv_drop_item": "Throw Item",
  "hexcasting.spell.book.hexecuteif:inv_drop_item": "Throw Item",

  "hexcasting.spell.hexecuteif:inv_transfer_item": "Transfer Item",
  "hexcasting.spell.book.hexecuteif:inv_transfer_item": "Transfer Item",

  "hexecuteif.entry.inventory": "HexecuteIf Inventory",
  "hexecuteif.page.inventory.inv_slot_count": "This function accepts an Inventory Holder as its parameter and returns the total number of slots available in the inventory. It helps determine the maximum capacity of the inventory.",
  "hexecuteif.page.inventory.inv_occupied_slots": "This function accepts an Inventory Holder as its parameter and returns a list of slots that are currently in use. Each element in the list represents a slot that contains at least one item.",
  "hexecuteif.page.inventory.inv_slot_item_count": "This function takes an Inventory Holder and a slot index as parameters. It returns the number of items present in the specified slot. It is important to note that the slot must contain items, and it cannot be empty.",
  "hexecuteif.page.inventory.inv_drop_item.1": "This function accepts an Inventory Holder, a slot index, and a number as parameters.",
  "hexecuteif.page.inventory.inv_drop_item.2": "It removes the specified number of items from the given slot in the inventory. The slot must contain items, ensuring that the function does not attempt to remove items from an empty slot.",
  "hexecuteif.page.inventory.inv_transfer_item.1": "$(br)This function requires a source Inventory Holder, a source slot index, a target Inventory Holder, a target slot index, and a number as parameters.",
  "hexecuteif.page.inventory.inv_transfer_item.2": "It transfers the specified number of items from the source slot in the source inventory to the target slot in the target inventory. The source slot must not be empty, and the target slot must be empty. Additionally, the number of items to be moved must be at least 1 and no more than the total number of items in the source slot.",




  "hexcasting.mishap.can_not_access_to_container_inventory": "You can't access to any containers by this spell",
  "hexcasting.mishap.can_not_access_to_player_inventory": "You can't access to any player by this spell",

  "hexcasting.mishap.can_not_modify_container_inventory": "You can't modify any container inventory by this spell",
  "hexcasting.mishap.can_not_modify_player_inventory": "You can't modify any player inventory by this spell",

  "hexcasting.mishap.invalid_value.slot.empty": "Empty Slot Index",
  "hexcasting.mishap.invalid_value.slot.not_empty": "Not Empty Slot Index",
  "hexcasting.mishap.invalid_value.inventory_holder": "Container Block or Player",

  "hexecuteif.mishap.excepted_block.block_entity": "Block Entity",
  "hexecuteif.mishap.excepted_block.container": "Container",

  "text.autoconfig.hexecuteif.title": "HexecuteId Config",

  "text.autoconfig.hexecuteif.category.common": "Common",
  "text.autoconfig.hexecuteif.category.client": "Client",
  "text.autoconfig.hexecuteif.category.server": "Server",

  "text.autoconfig.hexecuteif.option.common.multiplyContainerAccess": "Media Multiply On Container",
  "text.autoconfig.hexecuteif.option.common.multiplyContainerAccess.@Tooltip": "How much will the amount of media required to use spells that require access to the container's inventory be multiplied?",

  "text.autoconfig.hexecuteif.option.common.multiplyPlayerAccess": "Media Multiply On Player",
  "text.autoconfig.hexecuteif.option.common.multiplyPlayerAccess.@Tooltip": "How much will the amount of media required to use spells that require access to the playerâ€™s inventory be multiplied?",

  "text.autoconfig.hexecuteif.option.common.canAccessContainer": "Can Access To Container",
  "text.autoconfig.hexecuteif.option.common.canAccessContainer.@Tooltip": "Can a spell that requires access to inventory work with a container?",

  "text.autoconfig.hexecuteif.option.common.canAccessPlayer": "Can Access To Player",
  "text.autoconfig.hexecuteif.option.common.canAccessPlayer.@Tooltip": "Can a spell that requires access to inventory work with a player?",

  "text.autoconfig.hexecuteif.option.common.canModifyContainer": "Can Modify Container",
  "text.autoconfig.hexecuteif.option.common.canModifyContainer.@Tooltip": "Can a spell that changes inventory items work with a container?",

  "text.autoconfig.hexecuteif.option.common.canModifyPlayer": "Can Modify Player",
  "text.autoconfig.hexecuteif.option.common.canModifyPlayer.@Tooltip": "Can a spell that changes inventory items work with a player?"
}